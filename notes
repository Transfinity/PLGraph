Yacc file souces:
    GNU Octave
        ftp://ftp.gnu.org/gnu/octave/
        http://www.gnu.org/software/octave/index.html
    GNU Bash
        www.gnu.org/software/bash
    GCC 3.3 (contains c, c++, java, objective-c, bunch of others)
        gcc.gnu.org
    R
        http://www.r-project.org/
    GNU awk
        http://www.gnu.org/software/gawk/
    perl
        http://www.perl.org/get.html
    ruby
        http://www.ruby-lang.org/en/downloads/
    tiny cobol (doesn't work)
        http://tiny-cobol.sourceforge.net/download.php
    open cobol
        http://www.opencobol.org/modules/mydownloads/
    Some dude's pascal implementation
        http://www.moorecad.com/standardpascal/yacclex.html
    GNU Pascal
        http://www.gnu-pascal.de/alpha/
    PHP
        http://us2.php.net/downloads.php

Language notes:
    Fortran
    
    Cobol
        10/16: There seem to be two mainstream implementations of cobol for unix: open cobol and tiny cobol.  Both are written in c and use a yacc-based parser, but only open cobol will compile without issue.  Potential for within-language comparison.

    JavaScript
        10/16: JS is owned by Mozilla.  I can't find a yacc parser, but there are plenty of grammar specifications available (http://www.antlr.org/grammar/1153976512034/ecmascriptA3.g, http://hepunx.rl.ac.uk/~adye/jsspec11/llr.htm).  Firefox's JS interpreter is called spidermonkey, but doesn't use yacc

General notes:

9/30/12
    There does not appear to be a yacc grammar available for python - it looks like making the indentation levels significant is tricky within the context of yacc.  I will save this for later.
    
10/10/12
    From the internet (http://en.wikibooks.org/wiki/Software_Engineers_Handbook/Language_Dictionary/COBOL#General_Syntax): "the syntax (like other early languages, including FORTRAN) is not designed to follow a formal grammar; for this reason COBOL and FORTRAN parsers are rarely implemented using automatic code generators"
    Fortran plugin for gcc should be in the basic gcc package (on the home pc).  We'll see

10/16/12
    It looks like Antlr uses LL(1) grammars, wheras YACC/Bison use LALR grammars.  As such, I would not expect a .y file to work for antlr, or a .g file to work with bison.  It might eventually be interesting to look at the difference between the same language implemented in different ways, but for now I'm not going to bother with antlr - it only adds another variable.

11/6/12
PLGraph current goals:

Right now, it's all about the statistics.

I don't really know what I need to know, is the thing.  How can I decide what tests to run?  Well, that's what the hypothesis is for.  You say, I expect that we'll see this, because this, and then you test to see whether or not you see that.

And right now I don't have a hypothesis.  Which is partly because I don't know the data, but it's partly because I don't know what I want to know.

So the question is: is there any useful information contained in the transition graph of a language?  How does the high-level design of the language affect the graphs, and (eventually) how does this change the compiler.  And perhaps most importantly, is there more variation between different languages than there is between different implementations of the same language?
