Terminals unused in grammar

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 215 conflicts: 1 shift/reduce
State 658 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 top_statement_list: top_statement_list top_statement
    3                   | /* empty */

    4 namespace_name: "identifier (T_STRING)"
    5               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    6 top_statement: statement
    7              | function_declaration_statement
    8              | class_declaration_statement
    9              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   10              | "namespace (T_NAMESPACE)" namespace_name ';'
   11              | "namespace (T_NAMESPACE)" namespace_name '{' top_statement_list '}'
   12              | "namespace (T_NAMESPACE)" '{' top_statement_list '}'
   13              | "use (T_USE)" use_declarations ';'
   14              | constant_declaration ';'

   15 use_declarations: use_declarations ',' use_declaration
   16                 | use_declaration

   17 use_declaration: namespace_name
   18                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   19                | "\\ (T_NS_SEPARATOR)" namespace_name
   20                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   21 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   22                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   23 inner_statement_list: inner_statement_list inner_statement
   24                     | /* empty */

   25 inner_statement: statement
   26                | function_declaration_statement
   27                | class_declaration_statement
   28                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   29 statement: unticked_statement
   30          | "identifier (T_STRING)" ':'

   31 unticked_statement: '{' inner_statement_list '}'
   32                   | "if (T_IF)" '(' expr ')' statement elseif_list else_single
   33                   | "if (T_IF)" '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'
   34                   | "while (T_WHILE)" '(' expr ')' while_statement
   35                   | "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';'
   36                   | "for (T_FOR)" '(' for_expr ';' for_expr ';' for_expr ')' for_statement
   37                   | "switch (T_SWITCH)" '(' expr ')' switch_case_list
   38                   | "break (T_BREAK)" ';'
   39                   | "break (T_BREAK)" expr ';'
   40                   | "continue (T_CONTINUE)" ';'
   41                   | "continue (T_CONTINUE)" expr ';'
   42                   | "return (T_RETURN)" ';'
   43                   | "return (T_RETURN)" expr_without_variable ';'
   44                   | "return (T_RETURN)" variable ';'
   45                   | "global (T_GLOBAL)" global_var_list ';'
   46                   | "static (T_STATIC)" static_var_list ';'
   47                   | "echo (T_ECHO)" echo_expr_list ';'
   48                   | T_INLINE_HTML
   49                   | expr ';'
   50                   | "unset (T_UNSET)" '(' unset_variables ')' ';'
   51                   | "foreach (T_FOREACH)" '(' variable "as (T_AS)" foreach_variable foreach_optional_arg ')' foreach_statement
   52                   | "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" variable foreach_optional_arg ')' foreach_statement
   53                   | "declare (T_DECLARE)" '(' declare_list ')' declare_statement
   54                   | ';'
   55                   | "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches
   56                   | "throw (T_THROW)" expr ';'
   57                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   58 additional_catches: non_empty_additional_catches
   59                   | /* empty */

   60 non_empty_additional_catches: additional_catch
   61                             | non_empty_additional_catches additional_catch

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

   63 unset_variables: unset_variable
   64                | unset_variables ',' unset_variable

   65 unset_variable: variable

   66 function_declaration_statement: unticked_function_declaration_statement

   67 class_declaration_statement: unticked_class_declaration_statement

   68 is_reference: /* empty */
   69             | '&'

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list ')' '{' inner_statement_list '}'

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from implements_list '{' class_statement_list '}'
   72                                     | interface_entry "identifier (T_STRING)" interface_extends_list '{' class_statement_list '}'

   73 class_entry_type: "class (T_CLASS)"
   74                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
   75                 | "trait (T_TRAIT)"
   76                 | "final (T_FINAL)" "class (T_CLASS)"

   77 extends_from: /* empty */
   78             | "extends (T_EXTENDS)" fully_qualified_class_name

   79 interface_entry: "interface (T_INTERFACE)"

   80 interface_extends_list: /* empty */
   81                       | "extends (T_EXTENDS)" interface_list

   82 implements_list: /* empty */
   83                | "implements (T_IMPLEMENTS)" interface_list

   84 interface_list: fully_qualified_class_name
   85               | interface_list ',' fully_qualified_class_name

   86 foreach_optional_arg: /* empty */
   87                     | "=> (T_DOUBLE_ARROW)" foreach_variable

   88 foreach_variable: variable
   89                 | '&' variable

   90 for_statement: statement
   91              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

   92 foreach_statement: statement
   93                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

   94 declare_statement: statement
   95                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

   96 declare_list: "identifier (T_STRING)" '=' static_scalar
   97             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

   98 switch_case_list: '{' case_list '}'
   99                 | '{' ';' case_list '}'
  100                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  101                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  102 case_list: /* empty */
  103          | case_list "case (T_CASE)" expr case_separator inner_statement_list
  104          | case_list "default (T_DEFAULT)" case_separator inner_statement_list

  105 case_separator: ':'
  106               | ';'

  107 while_statement: statement
  108                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  109 elseif_list: /* empty */
  110            | elseif_list "elseif (T_ELSEIF)" '(' expr ')' statement

  111 new_elseif_list: /* empty */
  112                | new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list

  113 else_single: /* empty */
  114            | "else (T_ELSE)" statement

  115 new_else_single: /* empty */
  116                | "else (T_ELSE)" ':' inner_statement_list

  117 parameter_list: non_empty_parameter_list
  118               | /* empty */

  119 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)"
  120                         | optional_class_type '&' "variable (T_VARIABLE)"
  121                         | optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  122                         | optional_class_type "variable (T_VARIABLE)" '=' static_scalar
  123                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)"
  124                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)"
  125                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  126                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

  127 optional_class_type: /* empty */
  128                    | "array (T_ARRAY)"
  129                    | "callable (T_CALLABLE)"
  130                    | fully_qualified_class_name

  131 function_call_parameter_list: non_empty_function_call_parameter_list
  132                             | /* empty */

  133 non_empty_function_call_parameter_list: expr_without_variable
  134                                       | variable
  135                                       | '&' w_variable
  136                                       | non_empty_function_call_parameter_list ',' expr_without_variable
  137                                       | non_empty_function_call_parameter_list ',' variable
  138                                       | non_empty_function_call_parameter_list ',' '&' w_variable

  139 global_var_list: global_var_list ',' global_var
  140                | global_var

  141 global_var: "variable (T_VARIABLE)"
  142           | '$' r_variable
  143           | '$' '{' expr '}'

  144 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  145                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  146                | "variable (T_VARIABLE)"
  147                | "variable (T_VARIABLE)" '=' static_scalar

  148 class_statement_list: class_statement_list class_statement
  149                     | /* empty */

  150 class_statement: variable_modifiers class_variable_declaration ';'
  151                | class_constant_declaration ';'
  152                | trait_use_statement
  153                | method_modifiers function is_reference "identifier (T_STRING)" '(' parameter_list ')' method_body

  154 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  155 trait_list: fully_qualified_class_name
  156           | trait_list ',' fully_qualified_class_name

  157 trait_adaptations: ';'
  158                  | '{' trait_adaptation_list '}'

  159 trait_adaptation_list: /* empty */
  160                      | non_empty_trait_adaptation_list

  161 non_empty_trait_adaptation_list: trait_adaptation_statement
  162                                | non_empty_trait_adaptation_list trait_adaptation_statement

  163 trait_adaptation_statement: trait_precedence ';'
  164                           | trait_alias ';'

  165 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  166 trait_reference_list: fully_qualified_class_name
  167                     | trait_reference_list ',' fully_qualified_class_name

  168 trait_method_reference: "identifier (T_STRING)"
  169                       | trait_method_reference_fully_qualified

  170 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  171 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  172            | trait_method_reference "as (T_AS)" member_modifier

  173 trait_modifiers: /* empty */
  174                | member_modifier

  175 method_body: ';'
  176            | '{' inner_statement_list '}'

  177 variable_modifiers: non_empty_member_modifiers
  178                   | "var (T_VAR)"

  179 method_modifiers: /* empty */
  180                 | non_empty_member_modifiers

  181 non_empty_member_modifiers: member_modifier
  182                           | non_empty_member_modifiers member_modifier

  183 member_modifier: "public (T_PUBLIC)"
  184                | "protected (T_PROTECTED)"
  185                | "private (T_PRIVATE)"
  186                | "static (T_STATIC)"
  187                | "abstract (T_ABSTRACT)"
  188                | "final (T_FINAL)"

  189 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  190                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  191                           | "variable (T_VARIABLE)"
  192                           | "variable (T_VARIABLE)" '=' static_scalar

  193 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  194                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  195 echo_expr_list: echo_expr_list ',' expr
  196               | expr

  197 for_expr: /* empty */
  198         | non_empty_for_expr

  199 non_empty_for_expr: non_empty_for_expr ',' expr
  200                   | expr

  201 chaining_method_or_property: chaining_method_or_property variable_property
  202                            | variable_property

  203 chaining_dereference: chaining_dereference '[' dim_offset ']'
  204                     | '[' dim_offset ']'

  205 chaining_instance_call: chaining_dereference chaining_method_or_property
  206                       | chaining_dereference
  207                       | chaining_method_or_property

  208 instance_call: /* empty */
  209              | chaining_instance_call

  210 new_expr: "new (T_NEW)" class_name_reference ctor_arguments

  211 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr
  212                      | variable '=' expr
  213                      | variable '=' '&' variable
  214                      | variable '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  215                      | "clone (T_CLONE)" expr
  216                      | variable "+= (T_PLUS_EQUAL)" expr
  217                      | variable "-= (T_MINUS_EQUAL)" expr
  218                      | variable "*= (T_MUL_EQUAL)" expr
  219                      | variable "/= (T_DIV_EQUAL)" expr
  220                      | variable ".= (T_CONCAT_EQUAL)" expr
  221                      | variable "%= (T_MOD_EQUAL)" expr
  222                      | variable "&= (T_AND_EQUAL)" expr
  223                      | variable "|= (T_OR_EQUAL)" expr
  224                      | variable "^= (T_XOR_EQUAL)" expr
  225                      | variable "<<= (T_SL_EQUAL)" expr
  226                      | variable ">>= (T_SR_EQUAL)" expr
  227                      | rw_variable "++ (T_INC)"
  228                      | "++ (T_INC)" rw_variable
  229                      | rw_variable "-- (T_DEC)"
  230                      | "-- (T_DEC)" rw_variable
  231                      | expr "|| (T_BOOLEAN_OR)" expr
  232                      | expr "&& (T_BOOLEAN_AND)" expr
  233                      | expr "or (T_LOGICAL_OR)" expr
  234                      | expr "and (T_LOGICAL_AND)" expr
  235                      | expr "xor (T_LOGICAL_XOR)" expr
  236                      | expr '|' expr
  237                      | expr '&' expr
  238                      | expr '^' expr
  239                      | expr '.' expr
  240                      | expr '+' expr
  241                      | expr '-' expr
  242                      | expr '*' expr
  243                      | expr '/' expr
  244                      | expr '%' expr
  245                      | expr "<< (T_SL)" expr
  246                      | expr ">> (T_SR)" expr
  247                      | '+' expr
  248                      | '-' expr
  249                      | '!' expr
  250                      | '~' expr
  251                      | expr "=== (T_IS_IDENTICAL)" expr
  252                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr "== (T_IS_EQUAL)" expr
  254                      | expr "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr '<' expr
  256                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr '>' expr
  258                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  260                      | '(' expr ')'
  261                      | new_expr
  262                      | '(' new_expr ')' instance_call
  263                      | expr '?' expr ':' expr
  264                      | expr '?' ':' expr
  265                      | internal_functions_in_yacc
  266                      | "(int) (T_INT_CAST)" expr
  267                      | "(double) (T_DOUBLE_CAST)" expr
  268                      | "(string) (T_STRING_CAST)" expr
  269                      | "(array) (T_ARRAY_CAST)" expr
  270                      | "(object) (T_OBJECT_CAST)" expr
  271                      | "(bool) (T_BOOL_CAST)" expr
  272                      | "(unset) (T_UNSET_CAST)" expr
  273                      | "exit (T_EXIT)" exit_expr
  274                      | '@' expr
  275                      | scalar
  276                      | "array (T_ARRAY)" '(' array_pair_list ')'
  277                      | '[' array_pair_list ']'
  278                      | '`' backticks_expr '`'
  279                      | "print (T_PRINT)" expr
  280                      | function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  281                      | "static (T_STATIC)" function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  282 function: "function (T_FUNCTION)"

  283 lexical_vars: /* empty */
  284             | "use (T_USE)" '(' lexical_var_list ')'

  285 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  286                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  287                 | "variable (T_VARIABLE)"
  288                 | '&' "variable (T_VARIABLE)"

  289 function_call: namespace_name '(' function_call_parameter_list ')'
  290              | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')'
  291              | "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')'
  292              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  293              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  294              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  295              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  296              | variable_without_objects '(' function_call_parameter_list ')'

  297 class_name: "static (T_STATIC)"
  298           | namespace_name
  299           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  300           | "\\ (T_NS_SEPARATOR)" namespace_name

  301 fully_qualified_class_name: namespace_name
  302                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  303                           | "\\ (T_NS_SEPARATOR)" namespace_name

  304 class_name_reference: class_name
  305                     | dynamic_class_name_reference

  306 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" object_property dynamic_class_name_variable_properties
  307                             | base_variable

  308 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  309                                       | /* empty */

  310 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  311 exit_expr: /* empty */
  312          | '(' ')'
  313          | '(' expr ')'

  314 backticks_expr: /* empty */
  315               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  316               | encaps_list

  317 ctor_arguments: /* empty */
  318               | '(' function_call_parameter_list ')'

  319 common_scalar: "integer number (T_LNUMBER)"
  320              | "floating-point number (T_DNUMBER)"
  321              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  322              | "__LINE__ (T_LINE)"
  323              | "__FILE__ (T_FILE)"
  324              | "__DIR__ (T_DIR)"
  325              | "__TRAIT__ (T_TRAIT_C)"
  326              | "__METHOD__ (T_METHOD_C)"
  327              | "__FUNCTION__ (T_FUNC_C)"
  328              | "__NAMESPACE__ (T_NS_C)"
  329              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  330              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  331 static_scalar: common_scalar
  332              | namespace_name
  333              | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  334              | "\\ (T_NS_SEPARATOR)" namespace_name
  335              | '+' static_scalar
  336              | '-' static_scalar
  337              | "array (T_ARRAY)" '(' static_array_pair_list ')'
  338              | '[' static_array_pair_list ']'
  339              | static_class_constant
  340              | "__CLASS__ (T_CLASS_C)"

  341 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  342 scalar: "variable name (T_STRING_VARNAME)"
  343       | class_constant
  344       | namespace_name
  345       | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  346       | "\\ (T_NS_SEPARATOR)" namespace_name
  347       | common_scalar
  348       | '"' encaps_list '"'
  349       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  350       | "__CLASS__ (T_CLASS_C)"

  351 static_array_pair_list: /* empty */
  352                       | non_empty_static_array_pair_list possible_comma

  353 possible_comma: /* empty */
  354               | ','

  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  356                                 | non_empty_static_array_pair_list ',' static_scalar
  357                                 | static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  358                                 | static_scalar

  359 expr: r_variable
  360     | expr_without_variable

  361 r_variable: variable

  362 w_variable: variable

  363 rw_variable: variable

  364 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" object_property method_or_not variable_properties
  365         | base_variable_with_function_calls

  366 variable_properties: variable_properties variable_property
  367                    | /* empty */

  368 variable_property: "-> (T_OBJECT_OPERATOR)" object_property method_or_not

  369 array_method_dereference: array_method_dereference '[' dim_offset ']'
  370                         | method '[' dim_offset ']'

  371 method: '(' function_call_parameter_list ')'

  372 method_or_not: method
  373              | array_method_dereference
  374              | /* empty */

  375 variable_without_objects: reference_variable
  376                         | simple_indirect_reference reference_variable

  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  378              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  379 variable_class_name: reference_variable

  380 array_function_dereference: array_function_dereference '[' dim_offset ']'
  381                           | function_call '[' dim_offset ']'

  382 base_variable_with_function_calls: base_variable
  383                                  | array_function_dereference
  384                                  | function_call

  385 base_variable: reference_variable
  386              | simple_indirect_reference reference_variable
  387              | static_member

  388 reference_variable: reference_variable '[' dim_offset ']'
  389                   | reference_variable '{' expr '}'
  390                   | compound_variable

  391 compound_variable: "variable (T_VARIABLE)"
  392                  | '$' '{' expr '}'

  393 dim_offset: /* empty */
  394           | expr

  395 object_property: object_dim_list
  396                | variable_without_objects

  397 object_dim_list: object_dim_list '[' dim_offset ']'
  398                | object_dim_list '{' expr '}'
  399                | variable_name

  400 variable_name: "identifier (T_STRING)"
  401              | '{' expr '}'

  402 simple_indirect_reference: '$'
  403                          | simple_indirect_reference '$'

  404 assignment_list: assignment_list ',' assignment_list_element
  405                | assignment_list_element

  406 assignment_list_element: variable
  407                        | "list (T_LIST)" '(' assignment_list ')'
  408                        | /* empty */

  409 array_pair_list: /* empty */
  410                | non_empty_array_pair_list possible_comma

  411 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  412                          | non_empty_array_pair_list ',' expr
  413                          | expr "=> (T_DOUBLE_ARROW)" expr
  414                          | expr
  415                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  416                          | non_empty_array_pair_list ',' '&' w_variable
  417                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  418                          | '&' w_variable

  419 encaps_list: encaps_list encaps_var
  420            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  421            | encaps_var
  422            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  423 encaps_var: "variable (T_VARIABLE)"
  424           | "variable (T_VARIABLE)" '[' encaps_var_offset ']'
  425           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  426           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  427           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  428           | "{$ (T_CURLY_OPEN)" variable '}'

  429 encaps_var_offset: "identifier (T_STRING)"
  430                  | "number (T_NUM_STRING)"
  431                  | "variable (T_VARIABLE)"

  432 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  433                           | "empty (T_EMPTY)" '(' variable ')'
  434                           | "include (T_INCLUDE)" expr
  435                           | "include_once (T_INCLUDE_ONCE)" expr
  436                           | "eval (T_EVAL)" '(' expr ')'
  437                           | "require (T_REQUIRE)" expr
  438                           | "require_once (T_REQUIRE_ONCE)" expr

  439 isset_variables: variable
  440                | isset_variables ',' variable

  441 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  442               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 249
'"' (34) 348
'$' (36) 142 143 392 402 403
'%' (37) 244
'&' (38) 69 89 120 121 124 125 135 138 213 214 237 286 288 415 416
    417 418
'(' (40) 9 28 32 33 34 35 36 37 50 51 52 53 55 62 70 110 112 153 211
    260 262 276 280 281 284 289 290 291 292 293 294 295 296 312 313
    318 337 371 407 432 433 436
')' (41) 9 28 32 33 34 35 36 37 50 51 52 53 55 62 70 110 112 153 211
    260 262 276 280 281 284 289 290 291 292 293 294 295 296 312 313
    318 337 371 407 432 433 436
'*' (42) 242
'+' (43) 240 247 335
',' (44) 15 21 64 85 97 123 124 125 126 136 137 138 139 144 145 156
    167 189 190 193 195 199 285 286 354 355 356 404 411 412 415 416
    440
'-' (45) 241 248 336
'.' (46) 239
'/' (47) 243
':' (58) 30 33 91 93 95 100 101 105 108 112 116 263 264
';' (59) 9 10 13 14 28 33 35 36 38 39 40 41 42 43 44 45 46 47 49 50
    54 56 57 91 93 95 99 100 101 106 108 150 151 157 163 164 175
'<' (60) 255
'=' (61) 21 22 96 97 121 122 125 126 145 147 190 192 193 194 211 212
    213 214
'>' (62) 257
'?' (63) 263 264
'@' (64) 274
'[' (91) 203 204 277 338 369 370 380 381 388 397 424 427
']' (93) 203 204 277 338 369 370 380 381 388 397 424 427
'^' (94) 238
'`' (96) 278
'{' (123) 11 12 31 55 62 70 71 72 98 99 143 158 176 280 281 389 392
    398 401
'|' (124) 236
'}' (125) 11 12 31 55 62 70 71 72 98 99 143 158 176 280 281 389 392
    398 401 426 427 428
'~' (126) 250
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 438
"require (T_REQUIRE)" (259) 437
"eval (T_EVAL)" (260) 436
"include_once (T_INCLUDE_ONCE)" (261) 435
"include (T_INCLUDE)" (262) 434
"or (T_LOGICAL_OR)" (263) 233
"xor (T_LOGICAL_XOR)" (264) 235
"and (T_LOGICAL_AND)" (265) 234
"print (T_PRINT)" (266) 279
">>= (T_SR_EQUAL)" (267) 226
"<<= (T_SL_EQUAL)" (268) 225
"^= (T_XOR_EQUAL)" (269) 224
"|= (T_OR_EQUAL)" (270) 223
"&= (T_AND_EQUAL)" (271) 222
"%= (T_MOD_EQUAL)" (272) 221
".= (T_CONCAT_EQUAL)" (273) 220
"/= (T_DIV_EQUAL)" (274) 219
"*= (T_MUL_EQUAL)" (275) 218
"-= (T_MINUS_EQUAL)" (276) 217
"+= (T_PLUS_EQUAL)" (277) 216
"|| (T_BOOLEAN_OR)" (278) 231
"&& (T_BOOLEAN_AND)" (279) 232
"!== (T_IS_NOT_IDENTICAL)" (280) 252
"=== (T_IS_IDENTICAL)" (281) 251
"!= (T_IS_NOT_EQUAL)" (282) 254
"== (T_IS_EQUAL)" (283) 253
">= (T_IS_GREATER_OR_EQUAL)" (284) 258
"<= (T_IS_SMALLER_OR_EQUAL)" (285) 256
">> (T_SR)" (286) 246
"<< (T_SL)" (287) 245
"instanceof (T_INSTANCEOF)" (288) 259
"(unset) (T_UNSET_CAST)" (289) 272
"(bool) (T_BOOL_CAST)" (290) 271
"(object) (T_OBJECT_CAST)" (291) 270
"(array) (T_ARRAY_CAST)" (292) 269
"(string) (T_STRING_CAST)" (293) 268
"(double) (T_DOUBLE_CAST)" (294) 267
"(int) (T_INT_CAST)" (295) 266
"-- (T_DEC)" (296) 229 230
"++ (T_INC)" (297) 227 228
"clone (T_CLONE)" (298) 215
"new (T_NEW)" (299) 210 214
"exit (T_EXIT)" (300) 273
"if (T_IF)" (301) 32 33
"elseif (T_ELSEIF)" (302) 110 112
"else (T_ELSE)" (303) 114 116
"endif (T_ENDIF)" (304) 33
"integer number (T_LNUMBER)" (305) 319
"floating-point number (T_DNUMBER)" (306) 320
"identifier (T_STRING)" (307) 4 5 18 20 21 22 30 57 70 71 72 96 97
    153 168 170 171 193 194 341 400 425 429 441 442
"variable name (T_STRING_VARNAME)" (308) 342 427
"variable (T_VARIABLE)" (309) 55 62 119 120 121 122 123 124 125 126
    141 144 145 146 147 189 190 191 192 285 286 287 288 391 423 424
    425 431
"number (T_NUM_STRING)" (310) 430
T_INLINE_HTML (311) 48
T_CHARACTER (312)
T_BAD_CHARACTER (313)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (314) 315
    329 420 422
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (315) 321
"echo (T_ECHO)" (316) 47
"do (T_DO)" (317) 35
"while (T_WHILE)" (318) 34 35
"endwhile (T_ENDWHILE)" (319) 108
"for (T_FOR)" (320) 36
"endfor (T_ENDFOR)" (321) 91
"foreach (T_FOREACH)" (322) 51 52
"endforeach (T_ENDFOREACH)" (323) 93
"declare (T_DECLARE)" (324) 53
"enddeclare (T_ENDDECLARE)" (325) 95
"as (T_AS)" (326) 18 20 51 52 171 172
"switch (T_SWITCH)" (327) 37
"endswitch (T_ENDSWITCH)" (328) 100 101
"case (T_CASE)" (329) 103
"default (T_DEFAULT)" (330) 104
"break (T_BREAK)" (331) 38 39
"continue (T_CONTINUE)" (332) 40 41
"goto (T_GOTO)" (333) 57
"function (T_FUNCTION)" (334) 282
"const (T_CONST)" (335) 22 194
"return (T_RETURN)" (336) 42 43 44
"try (T_TRY)" (337) 55
"catch (T_CATCH)" (338) 55 62
"throw (T_THROW)" (339) 56
"use (T_USE)" (340) 13 154 284
"insteadof (T_INSTEADOF)" (341) 165
"global (T_GLOBAL)" (342) 45
"public (T_PUBLIC)" (343) 183
"protected (T_PROTECTED)" (344) 184
"private (T_PRIVATE)" (345) 185
"final (T_FINAL)" (346) 76 188
"abstract (T_ABSTRACT)" (347) 74 187
"static (T_STATIC)" (348) 46 186 281 297
"var (T_VAR)" (349) 178
"unset (T_UNSET)" (350) 50
"isset (T_ISSET)" (351) 432
"empty (T_EMPTY)" (352) 433
"__halt_compiler (T_HALT_COMPILER)" (353) 9 28
"class (T_CLASS)" (354) 73 74 76
"trait (T_TRAIT)" (355) 75
"interface (T_INTERFACE)" (356) 79
"extends (T_EXTENDS)" (357) 78 81
"implements (T_IMPLEMENTS)" (358) 83
"-> (T_OBJECT_OPERATOR)" (359) 306 310 364 368 425
"=> (T_DOUBLE_ARROW)" (360) 87 355 357 411 413 415 417
"list (T_LIST)" (361) 211 407
"array (T_ARRAY)" (362) 128 276 337
"callable (T_CALLABLE)" (363) 129
"__CLASS__ (T_CLASS_C)" (364) 340 350
"__TRAIT__ (T_TRAIT_C)" (365) 325
"__METHOD__ (T_METHOD_C)" (366) 326
"__FUNCTION__ (T_FUNC_C)" (367) 327
"__LINE__ (T_LINE)" (368) 322
"__FILE__ (T_FILE)" (369) 323
"comment (T_COMMENT)" (370)
"doc comment (T_DOC_COMMENT)" (371)
"open tag (T_OPEN_TAG)" (372)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (373)
"close tag (T_CLOSE_TAG)" (374)
"whitespace (T_WHITESPACE)" (375)
"heredoc start (T_START_HEREDOC)" (376) 329 330 349
"heredoc end (T_END_HEREDOC)" (377) 329 330 349
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (378) 426 427
"{$ (T_CURLY_OPEN)" (379) 428
":: (T_PAAMAYIM_NEKUDOTAYIM)" (380) 170 292 293 294 295 341 377 378
    441 442
"namespace (T_NAMESPACE)" (381) 10 11 12 290 299 302 333 345
"__NAMESPACE__ (T_NS_C)" (382) 328
"__DIR__ (T_DIR)" (383) 324
"\\ (T_NS_SEPARATOR)" (384) 5 19 20 290 291 299 300 302 303 333 334
    345 346


Nonterminals, with rules where they appear

$accept (158)
    on left: 0
start (159)
    on left: 1, on right: 0
top_statement_list (160)
    on left: 2 3, on right: 1 2 11 12
namespace_name (161)
    on left: 4 5, on right: 5 10 11 17 18 19 20 289 290 291 298 299
    300 301 302 303 332 333 334 344 345 346
top_statement (162)
    on left: 6 7 8 9 10 11 12 13 14, on right: 2
use_declarations (163)
    on left: 15 16, on right: 13 15
use_declaration (164)
    on left: 17 18 19 20, on right: 15 16
constant_declaration (165)
    on left: 21 22, on right: 14 21
inner_statement_list (166)
    on left: 23 24, on right: 23 31 33 55 62 70 91 93 95 103 104 108
    112 116 176 280 281
inner_statement (167)
    on left: 25 26 27 28, on right: 23
statement (168)
    on left: 29 30, on right: 6 25 32 35 90 92 94 107 110 114
unticked_statement (169)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 56 57, on right: 29
additional_catches (170)
    on left: 58 59, on right: 55
non_empty_additional_catches (171)
    on left: 60 61, on right: 58 61
additional_catch (172)
    on left: 62, on right: 60 61
unset_variables (173)
    on left: 63 64, on right: 50 64
unset_variable (174)
    on left: 65, on right: 63 64
function_declaration_statement (175)
    on left: 66, on right: 7 26
class_declaration_statement (176)
    on left: 67, on right: 8 27
is_reference (177)
    on left: 68 69, on right: 70 153 280 281
unticked_function_declaration_statement (178)
    on left: 70, on right: 66
unticked_class_declaration_statement (179)
    on left: 71 72, on right: 67
class_entry_type (180)
    on left: 73 74 75 76, on right: 71
extends_from (181)
    on left: 77 78, on right: 71
interface_entry (182)
    on left: 79, on right: 72
interface_extends_list (183)
    on left: 80 81, on right: 72
implements_list (184)
    on left: 82 83, on right: 71
interface_list (185)
    on left: 84 85, on right: 81 83 85
foreach_optional_arg (186)
    on left: 86 87, on right: 51 52
foreach_variable (187)
    on left: 88 89, on right: 51 87
for_statement (188)
    on left: 90 91, on right: 36
foreach_statement (189)
    on left: 92 93, on right: 51 52
declare_statement (190)
    on left: 94 95, on right: 53
declare_list (191)
    on left: 96 97, on right: 53 97
switch_case_list (192)
    on left: 98 99 100 101, on right: 37
case_list (193)
    on left: 102 103 104, on right: 98 99 100 101 103 104
case_separator (194)
    on left: 105 106, on right: 103 104
while_statement (195)
    on left: 107 108, on right: 34
elseif_list (196)
    on left: 109 110, on right: 32 110
new_elseif_list (197)
    on left: 111 112, on right: 33 112
else_single (198)
    on left: 113 114, on right: 32
new_else_single (199)
    on left: 115 116, on right: 33
parameter_list (200)
    on left: 117 118, on right: 70 153 280 281
non_empty_parameter_list (201)
    on left: 119 120 121 122 123 124 125 126, on right: 117 123 124
    125 126
optional_class_type (202)
    on left: 127 128 129 130, on right: 119 120 121 122 123 124 125
    126
function_call_parameter_list (203)
    on left: 131 132, on right: 289 290 291 292 293 294 295 296 318
    371
non_empty_function_call_parameter_list (204)
    on left: 133 134 135 136 137 138, on right: 131 136 137 138
global_var_list (205)
    on left: 139 140, on right: 45 139
global_var (206)
    on left: 141 142 143, on right: 139 140
static_var_list (207)
    on left: 144 145 146 147, on right: 46 144 145
class_statement_list (208)
    on left: 148 149, on right: 71 72 148
class_statement (209)
    on left: 150 151 152 153, on right: 148
trait_use_statement (210)
    on left: 154, on right: 152
trait_list (211)
    on left: 155 156, on right: 154 156
trait_adaptations (212)
    on left: 157 158, on right: 154
trait_adaptation_list (213)
    on left: 159 160, on right: 158
non_empty_trait_adaptation_list (214)
    on left: 161 162, on right: 160 162
trait_adaptation_statement (215)
    on left: 163 164, on right: 161 162
trait_precedence (216)
    on left: 165, on right: 163
trait_reference_list (217)
    on left: 166 167, on right: 165 167
trait_method_reference (218)
    on left: 168 169, on right: 171 172
trait_method_reference_fully_qualified (219)
    on left: 170, on right: 165 169
trait_alias (220)
    on left: 171 172, on right: 164
trait_modifiers (221)
    on left: 173 174, on right: 171
method_body (222)
    on left: 175 176, on right: 153
variable_modifiers (223)
    on left: 177 178, on right: 150
method_modifiers (224)
    on left: 179 180, on right: 153
non_empty_member_modifiers (225)
    on left: 181 182, on right: 177 180 182
member_modifier (226)
    on left: 183 184 185 186 187 188, on right: 172 174 181 182
class_variable_declaration (227)
    on left: 189 190 191 192, on right: 150 189 190
class_constant_declaration (228)
    on left: 193 194, on right: 151 193
echo_expr_list (229)
    on left: 195 196, on right: 47 195
for_expr (230)
    on left: 197 198, on right: 36
non_empty_for_expr (231)
    on left: 199 200, on right: 198 199
chaining_method_or_property (232)
    on left: 201 202, on right: 201 205 207
chaining_dereference (233)
    on left: 203 204, on right: 203 205 206
chaining_instance_call (234)
    on left: 205 206 207, on right: 209
instance_call (235)
    on left: 208 209, on right: 262
new_expr (236)
    on left: 210, on right: 261 262
expr_without_variable (237)
    on left: 211 212 213 214 215 216 217 218 219 220 221 222 223 224
    225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240
    241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256
    257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272
    273 274 275 276 277 278 279 280 281, on right: 43 52 133 136 360
function (238)
    on left: 282, on right: 70 153 280 281
lexical_vars (239)
    on left: 283 284, on right: 280 281
lexical_var_list (240)
    on left: 285 286 287 288, on right: 284 285 286
function_call (241)
    on left: 289 290 291 292 293 294 295 296, on right: 381 384
class_name (242)
    on left: 297 298 299 300, on right: 292 293 304 341 377 441
fully_qualified_class_name (243)
    on left: 301 302 303, on right: 55 62 78 84 85 130 155 156 166
    167 170
class_name_reference (244)
    on left: 304 305, on right: 210 214 259
dynamic_class_name_reference (245)
    on left: 306 307, on right: 305
dynamic_class_name_variable_properties (246)
    on left: 308 309, on right: 306 308
dynamic_class_name_variable_property (247)
    on left: 310, on right: 308
exit_expr (248)
    on left: 311 312 313, on right: 273
backticks_expr (249)
    on left: 314 315 316, on right: 278
ctor_arguments (250)
    on left: 317 318, on right: 210 214
common_scalar (251)
    on left: 319 320 321 322 323 324 325 326 327 328 329 330, on right:
    331 347
static_scalar (252)
    on left: 331 332 333 334 335 336 337 338 339 340, on right: 21
    22 96 97 121 122 125 126 145 147 190 192 193 194 335 336 355 356
    357 358
static_class_constant (253)
    on left: 341, on right: 339
scalar (254)
    on left: 342 343 344 345 346 347 348 349 350, on right: 275
static_array_pair_list (255)
    on left: 351 352, on right: 337 338
possible_comma (256)
    on left: 353 354, on right: 352 410
non_empty_static_array_pair_list (257)
    on left: 355 356 357 358, on right: 352 355 356
expr (258)
    on left: 359 360, on right: 32 33 34 35 37 39 41 49 56 103 110
    112 143 195 196 199 200 211 212 215 216 217 218 219 220 221 222
    223 224 225 226 231 232 233 234 235 236 237 238 239 240 241 242
    243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258
    259 260 263 264 266 267 268 269 270 271 272 274 279 313 389 392
    394 398 401 411 412 413 414 415 417 426 427 434 435 436 437 438
r_variable (259)
    on left: 361, on right: 142 359
w_variable (260)
    on left: 362, on right: 135 138 415 416 417 418
rw_variable (261)
    on left: 363, on right: 227 228 229 230
variable (262)
    on left: 364 365, on right: 44 51 52 65 88 89 134 137 212 213 214
    216 217 218 219 220 221 222 223 224 225 226 361 362 363 406 428
    433 439 440
variable_properties (263)
    on left: 366 367, on right: 364 366
variable_property (264)
    on left: 368, on right: 201 202 366
array_method_dereference (265)
    on left: 369 370, on right: 369 373
method (266)
    on left: 371, on right: 370 372
method_or_not (267)
    on left: 372 373 374, on right: 364 368
variable_without_objects (268)
    on left: 375 376, on right: 293 295 296 377 378 396
static_member (269)
    on left: 377 378, on right: 387
variable_class_name (270)
    on left: 379, on right: 294 295 378 442
array_function_dereference (271)
    on left: 380 381, on right: 380 383
base_variable_with_function_calls (272)
    on left: 382 383 384, on right: 364 365
base_variable (273)
    on left: 385 386 387, on right: 306 307 382
reference_variable (274)
    on left: 388 389 390, on right: 375 376 379 385 386 388 389
compound_variable (275)
    on left: 391 392, on right: 390
dim_offset (276)
    on left: 393 394, on right: 203 204 369 370 380 381 388 397
object_property (277)
    on left: 395 396, on right: 306 310 364 368
object_dim_list (278)
    on left: 397 398 399, on right: 395 397 398
variable_name (279)
    on left: 400 401, on right: 292 294 399
simple_indirect_reference (280)
    on left: 402 403, on right: 376 386 403
assignment_list (281)
    on left: 404 405, on right: 211 404 407
assignment_list_element (282)
    on left: 406 407 408, on right: 404 405
array_pair_list (283)
    on left: 409 410, on right: 276 277
non_empty_array_pair_list (284)
    on left: 411 412 413 414 415 416 417 418, on right: 410 411 412
    415 416
encaps_list (285)
    on left: 419 420 421 422, on right: 316 348 349 419 420
encaps_var (286)
    on left: 423 424 425 426 427 428, on right: 419 421 422
encaps_var_offset (287)
    on left: 429 430 431, on right: 424
internal_functions_in_yacc (288)
    on left: 432 433 434 435 436 437 438, on right: 265
isset_variables (289)
    on left: 439 440, on right: 432 440
class_constant (290)
    on left: 441 442, on right: 343


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 3 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    2 top_statement_list: top_statement_list . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "const (T_CONST)"                             shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "use (T_USE)"                                 shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 59
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 72
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 1 (start)

    namespace_name                           go to state 82
    top_statement                            go to state 83
    constant_declaration                     go to state 84
    statement                                go to state 85
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 87
    class_declaration_statement              go to state 88
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

  438 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 119
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 5

  437 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 120
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 6

  436 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 121


state 7

  435 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 122
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 8

  434 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 123
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 9

  279 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 124
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 10

  247 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 125
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 11

  248 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 126
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 12

  249 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 127
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 13

  250 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 128
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 14

  274 expr_without_variable: '@' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 129
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 15

  272 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 130
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 16

  271 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 131
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 17

  270 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 132
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 18

  269 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 133
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 19

  268 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 134
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 20

  267 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 135
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 21

  266 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 136
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 22

  230 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 142
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 23

  228 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 145
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 24

  277 expr_without_variable: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 409 (array_pair_list)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 148
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 25

  215 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 150
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 26

  210 new_expr: "new (T_NEW)" . class_name_reference ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 79

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 155
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 27

  273 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 161

    $default  reduce using rule 311 (exit_expr)

    exit_expr  go to state 162


state 28

   32 unticked_statement: "if (T_IF)" . '(' expr ')' statement elseif_list else_single
   33                   | "if (T_IF)" . '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 163


state 29

  319 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 319 (common_scalar)


state 30

  320 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 320 (common_scalar)


state 31

    4 namespace_name: "identifier (T_STRING)" .
   30 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 164

    $default  reduce using rule 4 (namespace_name)


state 32

  342 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 342 (scalar)


state 33

  391 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 391 (compound_variable)


state 34

   48 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 48 (unticked_statement)


state 35

  321 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 321 (common_scalar)


state 36

   47 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    echo_expr_list                     go to state 165
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 166
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 37

   35 unticked_statement: "do (T_DO)" . statement "while (T_WHILE)" '(' expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 167
    unticked_statement                 go to state 86
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 38

   34 unticked_statement: "while (T_WHILE)" . '(' expr ')' while_statement

    '('  shift, and go to state 168


state 39

   36 unticked_statement: "for (T_FOR)" . '(' for_expr ';' for_expr ';' for_expr ')' for_statement

    '('  shift, and go to state 169


state 40

   51 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" foreach_variable foreach_optional_arg ')' foreach_statement
   52                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" variable foreach_optional_arg ')' foreach_statement

    '('  shift, and go to state 170


state 41

   53 unticked_statement: "declare (T_DECLARE)" . '(' declare_list ')' declare_statement

    '('  shift, and go to state 171


state 42

   37 unticked_statement: "switch (T_SWITCH)" . '(' expr ')' switch_case_list

    '('  shift, and go to state 172


state 43

   38 unticked_statement: "break (T_BREAK)" . ';'
   39                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 173
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 174
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 44

   40 unticked_statement: "continue (T_CONTINUE)" . ';'
   41                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 175
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 176
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 45

   57 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 177


state 46

  282 function: "function (T_FUNCTION)" .

    $default  reduce using rule 282 (function)


state 47

   22 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 178


state 48

   42 unticked_statement: "return (T_RETURN)" . ';'
   43                   | "return (T_RETURN)" . expr_without_variable ';'
   44                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 179
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 180
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 182
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 49

   55 unticked_statement: "try (T_TRY)" . '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    '{'  shift, and go to state 183


state 50

   56 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 184
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 51

   13 top_statement: "use (T_USE)" . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name    go to state 186
    use_declarations  go to state 187
    use_declaration   go to state 188


state 52

   45 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var_list  go to state 191
    global_var       go to state 192


state 53

   76 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 193


state 54

   74 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 194


state 55

   46 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  281 expr_without_variable: "static (T_STATIC)" . function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  297 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 195
    "function (T_FUNCTION)"  shift, and go to state 46

    $default  reduce using rule 297 (class_name)

    static_var_list  go to state 196
    function         go to state 197


state 56

   50 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 198


state 57

  432 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 199


state 58

  433 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'

    '('  shift, and go to state 200


state 59

    9 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 201


state 60

   73 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 73 (class_entry_type)


state 61

   75 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 75 (class_entry_type)


state 62

   79 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 79 (interface_entry)


state 63

  211 expr_without_variable: "list (T_LIST)" . '(' assignment_list ')' '=' expr

    '('  shift, and go to state 202


state 64

  276 expr_without_variable: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 203


state 65

  350 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 350 (scalar)


state 66

  325 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 325 (common_scalar)


state 67

  326 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 326 (common_scalar)


state 68

  327 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 327 (common_scalar)


state 69

  322 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 322 (common_scalar)


state 70

  323 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 323 (common_scalar)


state 71

  329 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  330              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  349 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 209
    encaps_var   go to state 210


state 72

   10 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   11              | "namespace (T_NAMESPACE)" . namespace_name '{' top_statement_list '}'
   12              | "namespace (T_NAMESPACE)" . '{' top_statement_list '}'
  290 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  345 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 211
    '{'                      shift, and go to state 212

    namespace_name  go to state 213


state 73

  328 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 328 (common_scalar)


state 74

  324 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 324 (common_scalar)


state 75

  291 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' function_call_parameter_list ')'
  300 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  346 scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 214


state 76

  260 expr_without_variable: '(' . expr ')'
  262                      | '(' . new_expr ')' instance_call

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 215
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 216
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 77

   54 unticked_statement: ';' .

    $default  reduce using rule 54 (unticked_statement)


state 78

   31 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 217


state 79

  392 compound_variable: '$' . '{' expr '}'
  402 simple_indirect_reference: '$' .

    '{'  shift, and go to state 218

    $default  reduce using rule 402 (simple_indirect_reference)


state 80

  278 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 219
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 314 (backticks_expr)

    backticks_expr  go to state 220
    encaps_list     go to state 221
    encaps_var      go to state 210


state 81

  348 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 222
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 223
    encaps_var   go to state 210


state 82

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  289 function_call: namespace_name . '(' function_call_parameter_list ')'
  298 class_name: namespace_name .
  344 scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 225

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 298 (class_name)
    $default                       reduce using rule 344 (scalar)


state 83

    2 top_statement_list: top_statement_list top_statement .

    $default  reduce using rule 2 (top_statement_list)


state 84

   14 top_statement: constant_declaration . ';'
   21 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 226
    ';'  shift, and go to state 227


state 85

    6 top_statement: statement .

    $default  reduce using rule 6 (top_statement)


state 86

   29 statement: unticked_statement .

    $default  reduce using rule 29 (statement)


state 87

    7 top_statement: function_declaration_statement .

    $default  reduce using rule 7 (top_statement)


state 88

    8 top_statement: class_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 89

   66 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 66 (function_declaration_statement)


state 90

   67 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 67 (class_declaration_statement)


state 91

   71 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 228


state 92

   72 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 229


state 93

  261 expr_without_variable: new_expr .

    $default  reduce using rule 261 (expr_without_variable)


state 94

  360 expr: expr_without_variable .

    $default  reduce using rule 360 (expr)


state 95

   70 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" '(' parameter_list ')' '{' inner_statement_list '}'
  280 expr_without_variable: function . is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 230

    $default  reduce using rule 68 (is_reference)

    is_reference  go to state 231


state 96

  381 array_function_dereference: function_call . '[' dim_offset ']'
  384 base_variable_with_function_calls: function_call .

    '['  shift, and go to state 232

    $default  reduce using rule 384 (base_variable_with_function_calls)


state 97

  292 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  293              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  377 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  441 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 233


state 98

  347 scalar: common_scalar .

    $default  reduce using rule 347 (scalar)


state 99

  275 expr_without_variable: scalar .

    $default  reduce using rule 275 (expr_without_variable)


state 100

   49 unticked_statement: expr . ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ';'                           shift, and go to state 260


state 101

  359 expr: r_variable .

    $default  reduce using rule 359 (expr)


state 102

  227 expr_without_variable: rw_variable . "++ (T_INC)"
  229                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 261
    "++ (T_INC)"  shift, and go to state 262


state 103

  212 expr_without_variable: variable . '=' expr
  213                      | variable . '=' '&' variable
  214                      | variable . '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  216                      | variable . "+= (T_PLUS_EQUAL)" expr
  217                      | variable . "-= (T_MINUS_EQUAL)" expr
  218                      | variable . "*= (T_MUL_EQUAL)" expr
  219                      | variable . "/= (T_DIV_EQUAL)" expr
  220                      | variable . ".= (T_CONCAT_EQUAL)" expr
  221                      | variable . "%= (T_MOD_EQUAL)" expr
  222                      | variable . "&= (T_AND_EQUAL)" expr
  223                      | variable . "|= (T_OR_EQUAL)" expr
  224                      | variable . "^= (T_XOR_EQUAL)" expr
  225                      | variable . "<<= (T_SL_EQUAL)" expr
  226                      | variable . ">>= (T_SR_EQUAL)" expr
  361 r_variable: variable .
  363 rw_variable: variable .

    '='                    shift, and go to state 263
    ">>= (T_SR_EQUAL)"     shift, and go to state 264
    "<<= (T_SL_EQUAL)"     shift, and go to state 265
    "^= (T_XOR_EQUAL)"     shift, and go to state 266
    "|= (T_OR_EQUAL)"      shift, and go to state 267
    "&= (T_AND_EQUAL)"     shift, and go to state 268
    "%= (T_MOD_EQUAL)"     shift, and go to state 269
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 270
    "/= (T_DIV_EQUAL)"     shift, and go to state 271
    "*= (T_MUL_EQUAL)"     shift, and go to state 272
    "-= (T_MINUS_EQUAL)"   shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274

    "-- (T_DEC)"  reduce using rule 363 (rw_variable)
    "++ (T_INC)"  reduce using rule 363 (rw_variable)
    $default      reduce using rule 361 (r_variable)


state 104

  296 function_call: variable_without_objects . '(' function_call_parameter_list ')'

    '('  shift, and go to state 275


state 105

  387 base_variable: static_member .

    $default  reduce using rule 387 (base_variable)


state 106

  294 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  295              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  378 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  442 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 276


state 107

  380 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  383 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 277

    $default  reduce using rule 383 (base_variable_with_function_calls)


state 108

  364 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" object_property method_or_not variable_properties
  365         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 278

    $default  reduce using rule 365 (variable)


state 109

  382 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 382 (base_variable_with_function_calls)


state 110

  375 variable_without_objects: reference_variable .
  379 variable_class_name: reference_variable .
  385 base_variable: reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 379 (variable_class_name)
    '('                            reduce using rule 375 (variable_without_objects)
    $default                       reduce using rule 385 (base_variable)


state 111

  390 reference_variable: compound_variable .

    $default  reduce using rule 390 (reference_variable)


state 112

  376 variable_without_objects: simple_indirect_reference . reference_variable
  386 base_variable: simple_indirect_reference . reference_variable
  403 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 33
    '$'                      shift, and go to state 281

    reference_variable  go to state 282
    compound_variable   go to state 111


state 113

  265 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 265 (expr_without_variable)


state 114

  343 scalar: class_constant .

    $default  reduce using rule 343 (scalar)


state 115

    4 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 4 (namespace_name)


state 116

  281 expr_without_variable: "static (T_STATIC)" . function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  297 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 46

    $default  reduce using rule 297 (class_name)

    function  go to state 197


state 117

  290 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  345 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 211


state 118

  280 expr_without_variable: function . is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 230

    $default  reduce using rule 68 (is_reference)

    is_reference  go to state 283


state 119

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  438 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 438 (internal_functions_in_yacc)


state 120

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  437 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 437 (internal_functions_in_yacc)


state 121

  436 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 284
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 122

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  435 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 435 (internal_functions_in_yacc)


state 123

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  434 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 434 (internal_functions_in_yacc)


state 124

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  279                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 279 (expr_without_variable)


state 125

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  247                      | '+' expr .
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    $default  reduce using rule 247 (expr_without_variable)


state 126

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  248                      | '-' expr .
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    $default  reduce using rule 248 (expr_without_variable)


state 127

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  249                      | '!' expr .
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 249 (expr_without_variable)


state 128

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  250                      | '~' expr .
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    $default  reduce using rule 250 (expr_without_variable)


state 129

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  274                      | '@' expr .

    $default  reduce using rule 274 (expr_without_variable)


state 130

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  272                      | "(unset) (T_UNSET_CAST)" expr .

    $default  reduce using rule 272 (expr_without_variable)


state 131

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  271                      | "(bool) (T_BOOL_CAST)" expr .

    $default  reduce using rule 271 (expr_without_variable)


state 132

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  270                      | "(object) (T_OBJECT_CAST)" expr .

    $default  reduce using rule 270 (expr_without_variable)


state 133

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  269                      | "(array) (T_ARRAY_CAST)" expr .

    $default  reduce using rule 269 (expr_without_variable)


state 134

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  268                      | "(string) (T_STRING_CAST)" expr .

    $default  reduce using rule 268 (expr_without_variable)


state 135

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  267                      | "(double) (T_DOUBLE_CAST)" expr .

    $default  reduce using rule 267 (expr_without_variable)


state 136

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  266                      | "(int) (T_INT_CAST)" expr .

    $default  reduce using rule 266 (expr_without_variable)


state 137

  297 class_name: "static (T_STATIC)" .

    $default  reduce using rule 297 (class_name)


state 138

  290 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 285


state 139

  291 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' function_call_parameter_list ')'
  300 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 286


state 140

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  289 function_call: namespace_name . '(' function_call_parameter_list ')'
  298 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 225

    $default  reduce using rule 298 (class_name)


state 141

  292 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  293              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  377 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 287


state 142

  230 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 230 (expr_without_variable)


state 143

  363 rw_variable: variable .

    $default  reduce using rule 363 (rw_variable)


state 144

  294 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')'
  295              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')'
  378 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 288


state 145

  228 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 228 (expr_without_variable)


state 146

  418 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 289
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 147

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  413 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  414                          | expr .
  417                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 291

    $default  reduce using rule 414 (non_empty_array_pair_list)


state 148

  277 expr_without_variable: '[' array_pair_list . ']'

    ']'  shift, and go to state 292


state 149

  410 array_pair_list: non_empty_array_pair_list . possible_comma
  411 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  412                          | non_empty_array_pair_list . ',' expr
  415                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  416                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 293

    $default  reduce using rule 353 (possible_comma)

    possible_comma  go to state 294


state 150

  215 expr_without_variable: "clone (T_CLONE)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    $default  reduce using rule 215 (expr_without_variable)


state 151

  299 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 295


state 152

  300 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 296


state 153

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  298 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 298 (class_name)


state 154

  304 class_name_reference: class_name .
  377 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 297

    $default  reduce using rule 304 (class_name_reference)


state 155

  210 new_expr: "new (T_NEW)" class_name_reference . ctor_arguments

    '('  shift, and go to state 298

    $default  reduce using rule 317 (ctor_arguments)

    ctor_arguments  go to state 299


state 156

  305 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 305 (class_name_reference)


state 157

  378 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 300


state 158

  306 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" object_property dynamic_class_name_variable_properties
  307                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 301

    $default  reduce using rule 307 (dynamic_class_name_reference)


state 159

  379 variable_class_name: reference_variable .
  385 base_variable: reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 379 (variable_class_name)
    $default                       reduce using rule 385 (base_variable)


state 160

  386 base_variable: simple_indirect_reference . reference_variable
  403 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 33
    '$'                      shift, and go to state 281

    reference_variable  go to state 302
    compound_variable   go to state 111


state 161

  312 exit_expr: '(' . ')'
  313          | '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ')'                                           shift, and go to state 303
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 304
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 162

  273 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 273 (expr_without_variable)


state 163

   32 unticked_statement: "if (T_IF)" '(' . expr ')' statement elseif_list else_single
   33                   | "if (T_IF)" '(' . expr ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 305
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 164

   30 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 30 (statement)


state 165

   47 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  195 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 306
    ';'  shift, and go to state 307


state 166

  196 echo_expr_list: expr .
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 196 (echo_expr_list)


state 167

   35 unticked_statement: "do (T_DO)" statement . "while (T_WHILE)" '(' expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 308


state 168

   34 unticked_statement: "while (T_WHILE)" '(' . expr ')' while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 309
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 169

   36 unticked_statement: "for (T_FOR)" '(' . for_expr ';' for_expr ';' for_expr ')' for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 197 (for_expr)

    namespace_name                     go to state 82
    for_expr                           go to state 310
    non_empty_for_expr                 go to state 311
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 312
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 170

   51 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" foreach_variable foreach_optional_arg ')' foreach_statement
   52                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" variable foreach_optional_arg ')' foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 313
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 314
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 171

   53 unticked_statement: "declare (T_DECLARE)" '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 315

    declare_list  go to state 316


state 172

   37 unticked_statement: "switch (T_SWITCH)" '(' . expr ')' switch_case_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 317
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 173

   38 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 38 (unticked_statement)


state 174

   39 unticked_statement: "break (T_BREAK)" expr . ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ';'                           shift, and go to state 318


state 175

   40 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 40 (unticked_statement)


state 176

   41 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ';'                           shift, and go to state 319


state 177

   57 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 320


state 178

   22 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 321


state 179

   42 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 42 (unticked_statement)


state 180

   43 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  360 expr: expr_without_variable .

    ';'  shift, and go to state 322

    $default  reduce using rule 360 (expr)


state 181

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259


state 182

   44 unticked_statement: "return (T_RETURN)" variable . ';'
  212 expr_without_variable: variable . '=' expr
  213                      | variable . '=' '&' variable
  214                      | variable . '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  216                      | variable . "+= (T_PLUS_EQUAL)" expr
  217                      | variable . "-= (T_MINUS_EQUAL)" expr
  218                      | variable . "*= (T_MUL_EQUAL)" expr
  219                      | variable . "/= (T_DIV_EQUAL)" expr
  220                      | variable . ".= (T_CONCAT_EQUAL)" expr
  221                      | variable . "%= (T_MOD_EQUAL)" expr
  222                      | variable . "&= (T_AND_EQUAL)" expr
  223                      | variable . "|= (T_OR_EQUAL)" expr
  224                      | variable . "^= (T_XOR_EQUAL)" expr
  225                      | variable . "<<= (T_SL_EQUAL)" expr
  226                      | variable . ">>= (T_SR_EQUAL)" expr
  361 r_variable: variable .
  363 rw_variable: variable .

    '='                    shift, and go to state 263
    ">>= (T_SR_EQUAL)"     shift, and go to state 264
    "<<= (T_SL_EQUAL)"     shift, and go to state 265
    "^= (T_XOR_EQUAL)"     shift, and go to state 266
    "|= (T_OR_EQUAL)"      shift, and go to state 267
    "&= (T_AND_EQUAL)"     shift, and go to state 268
    "%= (T_MOD_EQUAL)"     shift, and go to state 269
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 270
    "/= (T_DIV_EQUAL)"     shift, and go to state 271
    "*= (T_MUL_EQUAL)"     shift, and go to state 272
    "-= (T_MINUS_EQUAL)"   shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274
    ';'                    shift, and go to state 323

    "-- (T_DEC)"  reduce using rule 363 (rw_variable)
    "++ (T_INC)"  reduce using rule 363 (rw_variable)
    $default      reduce using rule 361 (r_variable)


state 183

   55 unticked_statement: "try (T_TRY)" '{' . inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 324


state 184

   56 unticked_statement: "throw (T_THROW)" expr . ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ';'                           shift, and go to state 325


state 185

   19 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   20                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 326


state 186

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   17 use_declaration: namespace_name .
   18                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 327
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 17 (use_declaration)


state 187

   13 top_statement: "use (T_USE)" use_declarations . ';'
   15 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 328
    ';'  shift, and go to state 329


state 188

   16 use_declarations: use_declaration .

    $default  reduce using rule 16 (use_declarations)


state 189

  141 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 141 (global_var)


state 190

  142 global_var: '$' . r_variable
  143           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '{'                        shift, and go to state 330
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    r_variable                         go to state 331
    variable                           go to state 332
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 191

   45 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  139 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 333
    ';'  shift, and go to state 334


state 192

  140 global_var_list: global_var .

    $default  reduce using rule 140 (global_var_list)


state 193

   76 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 76 (class_entry_type)


state 194

   74 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 74 (class_entry_type)


state 195

  146 static_var_list: "variable (T_VARIABLE)" .
  147                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 335

    $default  reduce using rule 146 (static_var_list)


state 196

   46 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  144 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  145                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 336
    ';'  shift, and go to state 337


state 197

  281 expr_without_variable: "static (T_STATIC)" function . is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 230

    $default  reduce using rule 68 (is_reference)

    is_reference  go to state 338


state 198

   50 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    unset_variables                    go to state 339
    unset_variable                     go to state 340
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 341
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 199

  432 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 342
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    isset_variables                    go to state 343


state 200

  433 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 344
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 201

    9 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 345


state 202

  211 expr_without_variable: "list (T_LIST)" '(' . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 346
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    $default  reduce using rule 408 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 347
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 348
    assignment_list_element            go to state 349


state 203

  276 expr_without_variable: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 409 (array_pair_list)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 350
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 204

  423 encaps_var: "variable (T_VARIABLE)" .
  424           | "variable (T_VARIABLE)" . '[' encaps_var_offset ']'
  425           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 351
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 352

    $default  reduce using rule 423 (encaps_var)


state 205

  329 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  422 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 353
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 354


state 206

  330 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 330 (common_scalar)


state 207

  426 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  427           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 355
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 356
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 208

  428 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 357
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 209

  349 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  419 encaps_list: encaps_list . encaps_var
  420            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 358
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 359
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_var  go to state 360


state 210

  421 encaps_list: encaps_var .

    $default  reduce using rule 421 (encaps_list)


state 211

  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  345 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 361


state 212

   12 top_statement: "namespace (T_NAMESPACE)" '{' . top_statement_list '}'

    $default  reduce using rule 3 (top_statement_list)

    top_statement_list  go to state 362


state 213

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   10 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   11              | "namespace (T_NAMESPACE)" namespace_name . '{' top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    ';'                    shift, and go to state 363
    '{'                    shift, and go to state 364


state 214

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  291 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' function_call_parameter_list ')'
  300 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  346 scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 365

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 300 (class_name)
    $default                       reduce using rule 346 (scalar)


state 215

  261 expr_without_variable: new_expr .
  262                      | '(' new_expr . ')' instance_call

    ')'  shift, and go to state 366

    ')'       [reduce using rule 261 (expr_without_variable)]
    $default  reduce using rule 261 (expr_without_variable)


state 216

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  260                      | '(' expr . ')'
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 367


state 217

   23 inner_statement_list: inner_statement_list . inner_statement
   31 unticked_statement: '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 369
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 218

  392 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 374
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 219

  315 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  422 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    $default  reduce using rule 315 (backticks_expr)

    encaps_var  go to state 354


state 220

  278 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 375


state 221

  316 backticks_expr: encaps_list .
  419 encaps_list: encaps_list . encaps_var
  420            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 358
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 316 (backticks_expr)

    encaps_var  go to state 360


state 222

  422 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 354


state 223

  348 scalar: '"' encaps_list . '"'
  419 encaps_list: encaps_list . encaps_var
  420            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 358
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208
    '"'                                                         shift, and go to state 376

    encaps_var  go to state 360


state 224

    5 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 377


state 225

  289 function_call: namespace_name '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 379
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 226

   21 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 383


state 227

   14 top_statement: constant_declaration ';' .

    $default  reduce using rule 14 (top_statement)


state 228

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 384

    $default  reduce using rule 77 (extends_from)

    extends_from  go to state 385


state 229

   72 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 386

    $default  reduce using rule 80 (interface_extends_list)

    interface_extends_list  go to state 387


state 230

   69 is_reference: '&' .

    $default  reduce using rule 69 (is_reference)


state 231

   70 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" '(' parameter_list ')' '{' inner_statement_list '}'
  280 expr_without_variable: function is_reference . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 388
    '('                      shift, and go to state 389


state 232

  381 array_function_dereference: function_call '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 391
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 233

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' function_call_parameter_list ')'
  293              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' function_call_parameter_list ')'
  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  441 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 392
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 394
    reference_variable         go to state 395
    compound_variable          go to state 111
    variable_name              go to state 396
    simple_indirect_reference  go to state 397


state 234

  233 expr_without_variable: expr "or (T_LOGICAL_OR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 398
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 235

  235 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 399
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 236

  234 expr_without_variable: expr "and (T_LOGICAL_AND)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 400
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 237

  263 expr_without_variable: expr '?' . expr ':' expr
  264                      | expr '?' . ':' expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 401
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 402
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 238

  231 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 403
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 239

  232 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 404
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 240

  236 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 405
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 241

  238 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 406
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 242

  237 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 407
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 243

  252 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 408
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 244

  251 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 409
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 245

  254 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 410
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 246

  253 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 411
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 247

  255 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 412
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 248

  257 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 413
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 249

  258 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 414
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 250

  256 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 415
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 251

  246 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 416
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 252

  245 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 417
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 253

  240 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 418
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 254

  241 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 419
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 255

  239 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 420
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 256

  242 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 421
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 257

  243 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 422
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 258

  244 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 423
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 259

  259 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 79

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 424
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 260

   49 unticked_statement: expr ';' .

    $default  reduce using rule 49 (unticked_statement)


state 261

  229 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 229 (expr_without_variable)


state 262

  227 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 227 (expr_without_variable)


state 263

  212 expr_without_variable: variable '=' . expr
  213                      | variable '=' . '&' variable
  214                      | variable '=' . '&' "new (T_NEW)" class_name_reference ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 425
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 264

  226 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 427
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 265

  225 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 428
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 266

  224 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 429
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 267

  223 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 430
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 268

  222 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 431
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 269

  221 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 432
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 270

  220 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 433
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 271

  219 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 434
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 272

  218 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 435
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 273

  217 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 436
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 274

  216 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 437
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 275

  296 function_call: variable_without_objects '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 438
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 276

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' function_call_parameter_list ')'
  295              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' function_call_parameter_list ')'
  378 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  442 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 439
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 440
    reference_variable         go to state 395
    compound_variable          go to state 111
    variable_name              go to state 441
    simple_indirect_reference  go to state 397


state 277

  380 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 442
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 278

  364 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . object_property method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 444
    reference_variable         go to state 395
    compound_variable          go to state 111
    object_property            go to state 445
    object_dim_list            go to state 446
    variable_name              go to state 447
    simple_indirect_reference  go to state 397


state 279

  388 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 448
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 280

  389 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 449
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 281

  392 compound_variable: '$' . '{' expr '}'
  403 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 218

    $default  reduce using rule 403 (simple_indirect_reference)


state 282

  376 variable_without_objects: simple_indirect_reference reference_variable .
  386 base_variable: simple_indirect_reference reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    '('       reduce using rule 376 (variable_without_objects)
    $default  reduce using rule 386 (base_variable)


state 283

  280 expr_without_variable: function is_reference . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 389


state 284

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  436 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 450


state 285

  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 451


state 286

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  291 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' function_call_parameter_list ')'
  300 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 365

    $default  reduce using rule 300 (class_name)


state 287

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' function_call_parameter_list ')'
  293              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' function_call_parameter_list ')'
  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 394
    reference_variable         go to state 395
    compound_variable          go to state 111
    variable_name              go to state 396
    simple_indirect_reference  go to state 397


state 288

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' function_call_parameter_list ')'
  295              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' function_call_parameter_list ')'
  378 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 440
    reference_variable         go to state 395
    compound_variable          go to state 111
    variable_name              go to state 441
    simple_indirect_reference  go to state 397


state 289

  418 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 418 (non_empty_array_pair_list)


state 290

  362 w_variable: variable .

    $default  reduce using rule 362 (w_variable)


state 291

  413 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  417                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 452
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 453
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 292

  277 expr_without_variable: '[' array_pair_list ']' .

    $default  reduce using rule 277 (expr_without_variable)


state 293

  354 possible_comma: ',' .
  411 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  412                          | non_empty_array_pair_list ',' . expr
  415                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  416                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 454
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 354 (possible_comma)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 455
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 294

  410 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 410 (array_pair_list)


state 295

  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 456


state 296

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  300 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 300 (class_name)


state 297

  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 33
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 457
    reference_variable         go to state 395
    compound_variable          go to state 111
    simple_indirect_reference  go to state 397


state 298

  318 ctor_arguments: '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 458
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 299

  210 new_expr: "new (T_NEW)" class_name_reference ctor_arguments .

    $default  reduce using rule 210 (new_expr)


state 300

  378 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 33
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 459
    reference_variable         go to state 395
    compound_variable          go to state 111
    simple_indirect_reference  go to state 397


state 301

  306 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . object_property dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 444
    reference_variable         go to state 395
    compound_variable          go to state 111
    object_property            go to state 460
    object_dim_list            go to state 446
    variable_name              go to state 447
    simple_indirect_reference  go to state 397


state 302

  386 base_variable: simple_indirect_reference reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    $default  reduce using rule 386 (base_variable)


state 303

  312 exit_expr: '(' ')' .

    $default  reduce using rule 312 (exit_expr)


state 304

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  313 exit_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 461


state 305

   32 unticked_statement: "if (T_IF)" '(' expr . ')' statement elseif_list else_single
   33                   | "if (T_IF)" '(' expr . ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 462


state 306

  195 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 463
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 307

   47 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 47 (unticked_statement)


state 308

   35 unticked_statement: "do (T_DO)" statement "while (T_WHILE)" . '(' expr ')' ';'

    '('  shift, and go to state 464


state 309

   34 unticked_statement: "while (T_WHILE)" '(' expr . ')' while_statement
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 465


state 310

   36 unticked_statement: "for (T_FOR)" '(' for_expr . ';' for_expr ';' for_expr ')' for_statement

    ';'  shift, and go to state 466


state 311

  198 for_expr: non_empty_for_expr .
  199 non_empty_for_expr: non_empty_for_expr . ',' expr

    ','  shift, and go to state 467

    $default  reduce using rule 198 (for_expr)


state 312

  200 non_empty_for_expr: expr .
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 200 (non_empty_for_expr)


state 313

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" variable foreach_optional_arg ')' foreach_statement
  360 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 468

    $default  reduce using rule 360 (expr)


state 314

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" foreach_variable foreach_optional_arg ')' foreach_statement
  212 expr_without_variable: variable . '=' expr
  213                      | variable . '=' '&' variable
  214                      | variable . '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  216                      | variable . "+= (T_PLUS_EQUAL)" expr
  217                      | variable . "-= (T_MINUS_EQUAL)" expr
  218                      | variable . "*= (T_MUL_EQUAL)" expr
  219                      | variable . "/= (T_DIV_EQUAL)" expr
  220                      | variable . ".= (T_CONCAT_EQUAL)" expr
  221                      | variable . "%= (T_MOD_EQUAL)" expr
  222                      | variable . "&= (T_AND_EQUAL)" expr
  223                      | variable . "|= (T_OR_EQUAL)" expr
  224                      | variable . "^= (T_XOR_EQUAL)" expr
  225                      | variable . "<<= (T_SL_EQUAL)" expr
  226                      | variable . ">>= (T_SR_EQUAL)" expr
  361 r_variable: variable .
  363 rw_variable: variable .

    '='                    shift, and go to state 263
    ">>= (T_SR_EQUAL)"     shift, and go to state 264
    "<<= (T_SL_EQUAL)"     shift, and go to state 265
    "^= (T_XOR_EQUAL)"     shift, and go to state 266
    "|= (T_OR_EQUAL)"      shift, and go to state 267
    "&= (T_AND_EQUAL)"     shift, and go to state 268
    "%= (T_MOD_EQUAL)"     shift, and go to state 269
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 270
    "/= (T_DIV_EQUAL)"     shift, and go to state 271
    "*= (T_MUL_EQUAL)"     shift, and go to state 272
    "-= (T_MINUS_EQUAL)"   shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274
    "as (T_AS)"            shift, and go to state 469

    "-- (T_DEC)"  reduce using rule 363 (rw_variable)
    "++ (T_INC)"  reduce using rule 363 (rw_variable)
    $default      reduce using rule 361 (r_variable)


state 315

   96 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 470


state 316

   53 unticked_statement: "declare (T_DECLARE)" '(' declare_list . ')' declare_statement
   97 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 471
    ')'  shift, and go to state 472


state 317

   37 unticked_statement: "switch (T_SWITCH)" '(' expr . ')' switch_case_list
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 473


state 318

   39 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 39 (unticked_statement)


state 319

   41 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 41 (unticked_statement)


state 320

   57 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 57 (unticked_statement)


state 321

   22 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 485
    static_class_constant  go to state 486


state 322

   43 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 43 (unticked_statement)


state 323

   44 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 44 (unticked_statement)


state 324

   23 inner_statement_list: inner_statement_list . inner_statement
   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list . '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 487
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 325

   56 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 56 (unticked_statement)


state 326

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   19 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   20                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 488
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 19 (use_declaration)


state 327

   18 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 489


state 328

   15 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name   go to state 186
    use_declaration  go to state 490


state 329

   13 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 13 (top_statement)


state 330

  143 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 491
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 331

  142 global_var: '$' r_variable .

    $default  reduce using rule 142 (global_var)


state 332

  361 r_variable: variable .

    $default  reduce using rule 361 (r_variable)


state 333

  139 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var  go to state 492


state 334

   45 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 45 (unticked_statement)


state 335

  147 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 493
    static_class_constant  go to state 486


state 336

  144 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  145                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 494


state 337

   46 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 46 (unticked_statement)


state 338

  281 expr_without_variable: "static (T_STATIC)" function is_reference . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 495


state 339

   50 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
   64 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 496
    ')'  shift, and go to state 497


state 340

   63 unset_variables: unset_variable .

    $default  reduce using rule 63 (unset_variables)


state 341

   65 unset_variable: variable .

    $default  reduce using rule 65 (unset_variable)


state 342

  439 isset_variables: variable .

    $default  reduce using rule 439 (isset_variables)


state 343

  432 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  440 isset_variables: isset_variables . ',' variable

    ','  shift, and go to state 498
    ')'  shift, and go to state 499


state 344

  433 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    ')'  shift, and go to state 500


state 345

    9 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 501


state 346

  407 assignment_list_element: "list (T_LIST)" . '(' assignment_list ')'

    '('  shift, and go to state 502


state 347

  406 assignment_list_element: variable .

    $default  reduce using rule 406 (assignment_list_element)


state 348

  211 expr_without_variable: "list (T_LIST)" '(' assignment_list . ')' '=' expr
  404 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 503
    ')'  shift, and go to state 504


state 349

  405 assignment_list: assignment_list_element .

    $default  reduce using rule 405 (assignment_list)


state 350

  276 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 505


state 351

  424 encaps_var: "variable (T_VARIABLE)" '[' . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 506
    "variable (T_VARIABLE)"  shift, and go to state 507
    "number (T_NUM_STRING)"  shift, and go to state 508

    encaps_var_offset  go to state 509


state 352

  425 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 510


state 353

  329 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 329 (common_scalar)


state 354

  422 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 422 (encaps_list)


state 355

  342 scalar: "variable name (T_STRING_VARNAME)" .
  427 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 511

    $default  reduce using rule 342 (scalar)


state 356

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  426 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 512


state 357

  428 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 513


state 358

  420 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 420 (encaps_list)


state 359

  349 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 349 (scalar)


state 360

  419 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 419 (encaps_list)


state 361

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  345 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 514

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 299 (class_name)
    $default                       reduce using rule 345 (scalar)


state 362

    2 top_statement_list: top_statement_list . top_statement
   12 top_statement: "namespace (T_NAMESPACE)" '{' top_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "const (T_CONST)"                             shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "use (T_USE)"                                 shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 59
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 72
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 515
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    top_statement                            go to state 83
    constant_declaration                     go to state 84
    statement                                go to state 85
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 87
    class_declaration_statement              go to state 88
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 363

   10 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 10 (top_statement)


state 364

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . top_statement_list '}'

    $default  reduce using rule 3 (top_statement_list)

    top_statement_list  go to state 516


state 365

  291 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 517
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 366

  262 expr_without_variable: '(' new_expr ')' . instance_call

    '['                       shift, and go to state 518
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 519

    $default  reduce using rule 208 (instance_call)

    chaining_method_or_property  go to state 520
    chaining_dereference         go to state 521
    chaining_instance_call       go to state 522
    instance_call                go to state 523
    variable_property            go to state 524


state 367

  260 expr_without_variable: '(' expr ')' .

    $default  reduce using rule 260 (expr_without_variable)


state 368

   28 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 525


state 369

   31 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 31 (unticked_statement)


state 370

   23 inner_statement_list: inner_statement_list inner_statement .

    $default  reduce using rule 23 (inner_statement_list)


state 371

   25 inner_statement: statement .

    $default  reduce using rule 25 (inner_statement)


state 372

   26 inner_statement: function_declaration_statement .

    $default  reduce using rule 26 (inner_statement)


state 373

   27 inner_statement: class_declaration_statement .

    $default  reduce using rule 27 (inner_statement)


state 374

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  392 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 526


state 375

  278 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 278 (expr_without_variable)


state 376

  348 scalar: '"' encaps_list '"' .

    $default  reduce using rule 348 (scalar)


state 377

    5 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 378

  135 non_empty_function_call_parameter_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 527
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 379

  289 function_call: namespace_name '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 528


state 380

  131 function_call_parameter_list: non_empty_function_call_parameter_list .
  136 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' expr_without_variable
  137                                       | non_empty_function_call_parameter_list . ',' variable
  138                                       | non_empty_function_call_parameter_list . ',' '&' w_variable

    ','  shift, and go to state 529

    $default  reduce using rule 131 (function_call_parameter_list)


state 381

  133 non_empty_function_call_parameter_list: expr_without_variable .
  360 expr: expr_without_variable .

    ','       reduce using rule 133 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 133 (non_empty_function_call_parameter_list)
    $default  reduce using rule 360 (expr)


state 382

  134 non_empty_function_call_parameter_list: variable .
  212 expr_without_variable: variable . '=' expr
  213                      | variable . '=' '&' variable
  214                      | variable . '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  216                      | variable . "+= (T_PLUS_EQUAL)" expr
  217                      | variable . "-= (T_MINUS_EQUAL)" expr
  218                      | variable . "*= (T_MUL_EQUAL)" expr
  219                      | variable . "/= (T_DIV_EQUAL)" expr
  220                      | variable . ".= (T_CONCAT_EQUAL)" expr
  221                      | variable . "%= (T_MOD_EQUAL)" expr
  222                      | variable . "&= (T_AND_EQUAL)" expr
  223                      | variable . "|= (T_OR_EQUAL)" expr
  224                      | variable . "^= (T_XOR_EQUAL)" expr
  225                      | variable . "<<= (T_SL_EQUAL)" expr
  226                      | variable . ">>= (T_SR_EQUAL)" expr
  361 r_variable: variable .
  363 rw_variable: variable .

    '='                    shift, and go to state 263
    ">>= (T_SR_EQUAL)"     shift, and go to state 264
    "<<= (T_SL_EQUAL)"     shift, and go to state 265
    "^= (T_XOR_EQUAL)"     shift, and go to state 266
    "|= (T_OR_EQUAL)"      shift, and go to state 267
    "&= (T_AND_EQUAL)"     shift, and go to state 268
    "%= (T_MOD_EQUAL)"     shift, and go to state 269
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 270
    "/= (T_DIV_EQUAL)"     shift, and go to state 271
    "*= (T_MUL_EQUAL)"     shift, and go to state 272
    "-= (T_MINUS_EQUAL)"   shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274

    ','           reduce using rule 134 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 363 (rw_variable)
    "++ (T_INC)"  reduce using rule 363 (rw_variable)
    ')'           reduce using rule 134 (non_empty_function_call_parameter_list)
    $default      reduce using rule 361 (r_variable)


state 383

   21 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 530


state 384

   78 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 534


state 385

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 535

    $default  reduce using rule 82 (implements_list)

    implements_list  go to state 536


state 386

   81 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    interface_list              go to state 537
    fully_qualified_class_name  go to state 538


state 387

   72 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 539


state 388

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 540


state 389

  280 expr_without_variable: function is_reference '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 541
    "callable (T_CALLABLE)"    shift, and go to state 542
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    ')'       reduce using rule 118 (parameter_list)
    $default  reduce using rule 127 (optional_class_type)

    namespace_name              go to state 533
    parameter_list              go to state 543
    non_empty_parameter_list    go to state 544
    optional_class_type         go to state 545
    fully_qualified_class_name  go to state 546


state 390

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  394 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 394 (dim_offset)


state 391

  381 array_function_dereference: function_call '[' dim_offset . ']'

    ']'  shift, and go to state 547


state 392

  400 variable_name: "identifier (T_STRING)" .
  441 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 400 (variable_name)
    $default  reduce using rule 441 (class_constant)


state 393

  401 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 548
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 394

  293 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' function_call_parameter_list ')'
  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 549

    $default  reduce using rule 377 (static_member)


state 395

  375 variable_without_objects: reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    $default  reduce using rule 375 (variable_without_objects)


state 396

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' function_call_parameter_list ')'

    '('  shift, and go to state 550


state 397

  376 variable_without_objects: simple_indirect_reference . reference_variable
  403 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 33
    '$'                      shift, and go to state 281

    reference_variable  go to state 551
    compound_variable   go to state 111


state 398

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  233                      | expr "or (T_LOGICAL_OR)" expr .
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 233 (expr_without_variable)


state 399

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  235                      | expr "xor (T_LOGICAL_XOR)" expr .
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 235 (expr_without_variable)


state 400

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  234                      | expr "and (T_LOGICAL_AND)" expr .
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 234 (expr_without_variable)


state 401

  264 expr_without_variable: expr '?' ':' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 552
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 402

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  263                      | expr '?' expr . ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    ':'                           shift, and go to state 553
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259


state 403

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  231                      | expr "|| (T_BOOLEAN_OR)" expr .
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 231 (expr_without_variable)


state 404

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  232                      | expr "&& (T_BOOLEAN_AND)" expr .
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 232 (expr_without_variable)


state 405

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  236                      | expr '|' expr .
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 236 (expr_without_variable)


state 406

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  238                      | expr '^' expr .
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 238 (expr_without_variable)


state 407

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  237                      | expr '&' expr .
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 237 (expr_without_variable)


state 408

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  252                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 252 (expr_without_variable)


state 409

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  251                      | expr "=== (T_IS_IDENTICAL)" expr .
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 251 (expr_without_variable)


state 410

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  254                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 254 (expr_without_variable)


state 411

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  253                      | expr "== (T_IS_EQUAL)" expr .
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 253 (expr_without_variable)


state 412

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  255                      | expr '<' expr .
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    ">> (T_SR)"                  shift, and go to state 251
    "<< (T_SL)"                  shift, and go to state 252
    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 255 (expr_without_variable)


state 413

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  257                      | expr '>' expr .
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    ">> (T_SR)"                  shift, and go to state 251
    "<< (T_SL)"                  shift, and go to state 252
    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 257 (expr_without_variable)


state 414

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  258                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    ">> (T_SR)"                  shift, and go to state 251
    "<< (T_SL)"                  shift, and go to state 252
    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 258 (expr_without_variable)


state 415

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  256                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    ">> (T_SR)"                  shift, and go to state 251
    "<< (T_SL)"                  shift, and go to state 252
    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 256 (expr_without_variable)


state 416

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  246                      | expr ">> (T_SR)" expr .
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 246 (expr_without_variable)


state 417

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  245                      | expr "<< (T_SL)" expr .
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '+'                          shift, and go to state 253
    '-'                          shift, and go to state 254
    '.'                          shift, and go to state 255
    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 245 (expr_without_variable)


state 418

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  240                      | expr '+' expr .
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 240 (expr_without_variable)


state 419

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  241                      | expr '-' expr .
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 241 (expr_without_variable)


state 420

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  239                      | expr '.' expr .
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '*'                          shift, and go to state 256
    '/'                          shift, and go to state 257
    '%'                          shift, and go to state 258
    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 239 (expr_without_variable)


state 421

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  242                      | expr '*' expr .
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 242 (expr_without_variable)


state 422

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  243                      | expr '/' expr .
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 243 (expr_without_variable)


state 423

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  244                      | expr '%' expr .
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 259

    $default  reduce using rule 244 (expr_without_variable)


state 424

  259 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 259 (expr_without_variable)


state 425

  213 expr_without_variable: variable '=' '&' . variable
  214                      | variable '=' '&' . "new (T_NEW)" class_name_reference ctor_arguments

    "new (T_NEW)"              shift, and go to state 554
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 555
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 426

  212 expr_without_variable: variable '=' expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 212 (expr_without_variable)


state 427

  226 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 226 (expr_without_variable)


state 428

  225 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 225 (expr_without_variable)


state 429

  224 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 224 (expr_without_variable)


state 430

  223 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 223 (expr_without_variable)


state 431

  222 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 222 (expr_without_variable)


state 432

  221 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 221 (expr_without_variable)


state 433

  220 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 220 (expr_without_variable)


state 434

  219 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 219 (expr_without_variable)


state 435

  218 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 218 (expr_without_variable)


state 436

  217 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 217 (expr_without_variable)


state 437

  216 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 216 (expr_without_variable)


state 438

  296 function_call: variable_without_objects '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 556


state 439

  400 variable_name: "identifier (T_STRING)" .
  442 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 400 (variable_name)
    $default  reduce using rule 442 (class_constant)


state 440

  295 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' function_call_parameter_list ')'
  378 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 557

    $default  reduce using rule 378 (static_member)


state 441

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' function_call_parameter_list ')'

    '('  shift, and go to state 558


state 442

  380 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 559


state 443

  400 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 400 (variable_name)


state 444

  396 object_property: variable_without_objects .

    $default  reduce using rule 396 (object_property)


state 445

  364 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" object_property . method_or_not variable_properties

    '('  shift, and go to state 560

    $default  reduce using rule 374 (method_or_not)

    array_method_dereference  go to state 561
    method                    go to state 562
    method_or_not             go to state 563


state 446

  395 object_property: object_dim_list .
  397 object_dim_list: object_dim_list . '[' dim_offset ']'
  398                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 564
    '{'  shift, and go to state 565

    $default  reduce using rule 395 (object_property)


state 447

  399 object_dim_list: variable_name .

    $default  reduce using rule 399 (object_dim_list)


state 448

  388 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 566


state 449

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  389 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 567


state 450

  436 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 436 (internal_functions_in_yacc)


state 451

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' function_call_parameter_list ')'
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224
    '('                    shift, and go to state 514

    $default  reduce using rule 299 (class_name)


state 452

  417 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 568
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 453

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  413 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 413 (non_empty_array_pair_list)


state 454

  416 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 569
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 455

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  411 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  412                          | non_empty_array_pair_list ',' expr .
  415                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 570

    $default  reduce using rule 412 (non_empty_array_pair_list)


state 456

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 299 (class_name)


state 457

  377 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 377 (static_member)


state 458

  318 ctor_arguments: '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 571


state 459

  378 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 378 (static_member)


state 460

  306 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" object_property . dynamic_class_name_variable_properties

    $default  reduce using rule 309 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 572


state 461

  313 exit_expr: '(' expr ')' .

    $default  reduce using rule 313 (exit_expr)


state 462

   32 unticked_statement: "if (T_IF)" '(' expr ')' . statement elseif_list else_single
   33                   | "if (T_IF)" '(' expr ')' . ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 573
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 574
    unticked_statement                 go to state 86
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 463

  195 echo_expr_list: echo_expr_list ',' expr .
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 195 (echo_expr_list)


state 464

   35 unticked_statement: "do (T_DO)" statement "while (T_WHILE)" '(' . expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 575
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 465

   34 unticked_statement: "while (T_WHILE)" '(' expr ')' . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 576
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 577
    unticked_statement                 go to state 86
    while_statement                    go to state 578
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 466

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' . for_expr ';' for_expr ')' for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 197 (for_expr)

    namespace_name                     go to state 82
    for_expr                           go to state 579
    non_empty_for_expr                 go to state 311
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 312
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 467

  199 non_empty_for_expr: non_empty_for_expr ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 580
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 468

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . variable foreach_optional_arg ')' foreach_statement

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 581
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 469

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . foreach_variable foreach_optional_arg ')' foreach_statement

    '&'                        shift, and go to state 582
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    foreach_variable                   go to state 583
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 584
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 470

   96 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 585
    static_class_constant  go to state 486


state 471

   97 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 586


state 472

   53 unticked_statement: "declare (T_DECLARE)" '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 587
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 588
    unticked_statement                 go to state 86
    declare_statement                  go to state 589
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 473

   37 unticked_statement: "switch (T_SWITCH)" '(' expr ')' . switch_case_list

    ':'  shift, and go to state 590
    '{'  shift, and go to state 591

    switch_case_list  go to state 592


state 474

  335 static_scalar: '+' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 593
    static_class_constant  go to state 486


state 475

  336 static_scalar: '-' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 594
    static_class_constant  go to state 486


state 476

  338 static_scalar: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    $default  reduce using rule 351 (static_array_pair_list)

    namespace_name                    go to state 482
    class_name                        go to state 483
    common_scalar                     go to state 484
    static_scalar                     go to state 595
    static_class_constant             go to state 486
    static_array_pair_list            go to state 596
    non_empty_static_array_pair_list  go to state 597


state 477

  337 static_scalar: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 598


state 478

  340 static_scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 340 (static_scalar)


state 479

  329 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  330              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 599
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206


state 480

  299 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  333 static_scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 600


state 481

  300 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  334 static_scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 601


state 482

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  298 class_name: namespace_name .
  332 static_scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 298 (class_name)
    $default                       reduce using rule 332 (static_scalar)


state 483

  341 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 602


state 484

  331 static_scalar: common_scalar .

    $default  reduce using rule 331 (static_scalar)


state 485

   22 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 22 (constant_declaration)


state 486

  339 static_scalar: static_class_constant .

    $default  reduce using rule 339 (static_scalar)


state 487

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' . "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    "catch (T_CATCH)"  shift, and go to state 603


state 488

   20 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 604


state 489

   18 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 18 (use_declaration)


state 490

   15 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 15 (use_declarations)


state 491

  143 global_var: '$' '{' expr . '}'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 605


state 492

  139 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 139 (global_var_list)


state 493

  147 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 147 (static_var_list)


state 494

  144 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  145                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 606

    $default  reduce using rule 144 (static_var_list)


state 495

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 541
    "callable (T_CALLABLE)"    shift, and go to state 542
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    ')'       reduce using rule 118 (parameter_list)
    $default  reduce using rule 127 (optional_class_type)

    namespace_name              go to state 533
    parameter_list              go to state 607
    non_empty_parameter_list    go to state 544
    optional_class_type         go to state 545
    fully_qualified_class_name  go to state 546


state 496

   64 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    unset_variable                     go to state 608
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 341
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 497

   50 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 609


state 498

  440 isset_variables: isset_variables ',' . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 610
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 499

  432 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 432 (internal_functions_in_yacc)


state 500

  433 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 433 (internal_functions_in_yacc)


state 501

    9 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 9 (top_statement)


state 502

  407 assignment_list_element: "list (T_LIST)" '(' . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 346
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    $default  reduce using rule 408 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 347
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 611
    assignment_list_element            go to state 349


state 503

  404 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 346
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    $default  reduce using rule 408 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 347
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list_element            go to state 612


state 504

  211 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' . '=' expr

    '='  shift, and go to state 613


state 505

  276 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 276 (expr_without_variable)


state 506

  429 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 429 (encaps_var_offset)


state 507

  431 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 431 (encaps_var_offset)


state 508

  430 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 430 (encaps_var_offset)


state 509

  424 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset . ']'

    ']'  shift, and go to state 614


state 510

  425 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 425 (encaps_var)


state 511

  427 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 615
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 512

  426 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 426 (encaps_var)


state 513

  428 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 428 (encaps_var)


state 514

  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 616
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 515

   12 top_statement: "namespace (T_NAMESPACE)" '{' top_statement_list '}' .

    $default  reduce using rule 12 (top_statement)


state 516

    2 top_statement_list: top_statement_list . top_statement
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' top_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "const (T_CONST)"                             shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "use (T_USE)"                                 shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 59
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 72
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 617
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    top_statement                            go to state 83
    constant_declaration                     go to state 84
    statement                                go to state 85
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 87
    class_declaration_statement              go to state 88
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 517

  291 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 618


state 518

  204 chaining_dereference: '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 619
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 519

  368 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property method_or_not

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 444
    reference_variable         go to state 395
    compound_variable          go to state 111
    object_property            go to state 620
    object_dim_list            go to state 446
    variable_name              go to state 447
    simple_indirect_reference  go to state 397


state 520

  201 chaining_method_or_property: chaining_method_or_property . variable_property
  207 chaining_instance_call: chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 519

    $default  reduce using rule 207 (chaining_instance_call)

    variable_property  go to state 621


state 521

  203 chaining_dereference: chaining_dereference . '[' dim_offset ']'
  205 chaining_instance_call: chaining_dereference . chaining_method_or_property
  206                       | chaining_dereference .

    '['                       shift, and go to state 622
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 519

    $default  reduce using rule 206 (chaining_instance_call)

    chaining_method_or_property  go to state 623
    variable_property            go to state 524


state 522

  209 instance_call: chaining_instance_call .

    $default  reduce using rule 209 (instance_call)


state 523

  262 expr_without_variable: '(' new_expr ')' instance_call .

    $default  reduce using rule 262 (expr_without_variable)


state 524

  202 chaining_method_or_property: variable_property .

    $default  reduce using rule 202 (chaining_method_or_property)


state 525

   28 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 624


state 526

  392 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 392 (compound_variable)


state 527

  135 non_empty_function_call_parameter_list: '&' w_variable .

    $default  reduce using rule 135 (non_empty_function_call_parameter_list)


state 528

  289 function_call: namespace_name '(' function_call_parameter_list ')' .

    $default  reduce using rule 289 (function_call)


state 529

  136 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . expr_without_variable
  137                                       | non_empty_function_call_parameter_list ',' . variable
  138                                       | non_empty_function_call_parameter_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 625
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 626
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 627
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 530

   21 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 628
    static_class_constant  go to state 486


state 531

  302 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 629


state 532

  303 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 630


state 533

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  301 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 301 (fully_qualified_class_name)


state 534

   78 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 78 (extends_from)


state 535

   83 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    interface_list              go to state 631
    fully_qualified_class_name  go to state 538


state 536

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 632


state 537

   81 interface_extends_list: "extends (T_EXTENDS)" interface_list .
   85 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 633

    $default  reduce using rule 81 (interface_extends_list)


state 538

   84 interface_list: fully_qualified_class_name .

    $default  reduce using rule 84 (interface_list)


state 539

   72 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 149 (class_statement_list)

    class_statement_list  go to state 634


state 540

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 541
    "callable (T_CALLABLE)"    shift, and go to state 542
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    ')'       reduce using rule 118 (parameter_list)
    $default  reduce using rule 127 (optional_class_type)

    namespace_name              go to state 533
    parameter_list              go to state 635
    non_empty_parameter_list    go to state 544
    optional_class_type         go to state 545
    fully_qualified_class_name  go to state 546


state 541

  128 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 128 (optional_class_type)


state 542

  129 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 129 (optional_class_type)


state 543

  280 expr_without_variable: function is_reference '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 636


state 544

  117 parameter_list: non_empty_parameter_list .
  123 non_empty_parameter_list: non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)"
  124                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)"
  125                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  126                         | non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 637

    $default  reduce using rule 117 (parameter_list)


state 545

  119 non_empty_parameter_list: optional_class_type . "variable (T_VARIABLE)"
  120                         | optional_class_type . '&' "variable (T_VARIABLE)"
  121                         | optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  122                         | optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 638
    "variable (T_VARIABLE)"  shift, and go to state 639


state 546

  130 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 130 (optional_class_type)


state 547

  381 array_function_dereference: function_call '[' dim_offset ']' .

    $default  reduce using rule 381 (array_function_dereference)


state 548

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  401 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 640


state 549

  293 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 641
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 550

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 642
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 551

  376 variable_without_objects: simple_indirect_reference reference_variable .
  388 reference_variable: reference_variable . '[' dim_offset ']'
  389                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 279
    '{'  shift, and go to state 280

    $default  reduce using rule 376 (variable_without_objects)


state 552

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  264                      | expr '?' ':' expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 264 (expr_without_variable)


state 553

  263 expr_without_variable: expr '?' expr ':' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 643
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 554

  214 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 79

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 644
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 555

  213 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 213 (expr_without_variable)


state 556

  296 function_call: variable_without_objects '(' function_call_parameter_list ')' .

    $default  reduce using rule 296 (function_call)


state 557

  295 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 645
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 558

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 646
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 559

  380 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 380 (array_function_dereference)


state 560

  371 method: '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 378
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 132 (function_call_parameter_list)

    namespace_name                          go to state 82
    function_call_parameter_list            go to state 647
    non_empty_function_call_parameter_list  go to state 380
    new_expr                                go to state 93
    expr_without_variable                   go to state 381
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 382
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 561

  369 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  373 method_or_not: array_method_dereference .

    '['  shift, and go to state 648

    $default  reduce using rule 373 (method_or_not)


state 562

  370 array_method_dereference: method . '[' dim_offset ']'
  372 method_or_not: method .

    '['  shift, and go to state 649

    $default  reduce using rule 372 (method_or_not)


state 563

  364 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" object_property method_or_not . variable_properties

    $default  reduce using rule 367 (variable_properties)

    variable_properties  go to state 650


state 564

  397 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 651
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 565

  398 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 652
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 566

  388 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 388 (reference_variable)


state 567

  389 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 389 (reference_variable)


state 568

  417 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 417 (non_empty_array_pair_list)


state 569

  416 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 416 (non_empty_array_pair_list)


state 570

  411 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  415                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '&'                                           shift, and go to state 653
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 654
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 571

  318 ctor_arguments: '(' function_call_parameter_list ')' .

    $default  reduce using rule 318 (ctor_arguments)


state 572

  306 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" object_property dynamic_class_name_variable_properties .
  308 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 655

    $default  reduce using rule 306 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 656


state 573

   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' . inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 657


state 574

   32 unticked_statement: "if (T_IF)" '(' expr ')' statement . elseif_list else_single

    $default  reduce using rule 109 (elseif_list)

    elseif_list  go to state 658


state 575

   35 unticked_statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr . ')' ';'
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 659


state 576

  108 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 660


state 577

  107 while_statement: statement .

    $default  reduce using rule 107 (while_statement)


state 578

   34 unticked_statement: "while (T_WHILE)" '(' expr ')' while_statement .

    $default  reduce using rule 34 (unticked_statement)


state 579

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' for_expr . ';' for_expr ')' for_statement

    ';'  shift, and go to state 661


state 580

  199 non_empty_for_expr: non_empty_for_expr ',' expr .
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 199 (non_empty_for_expr)


state 581

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" variable . foreach_optional_arg ')' foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 662

    $default  reduce using rule 86 (foreach_optional_arg)

    foreach_optional_arg  go to state 663


state 582

   89 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 664
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 583

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" foreach_variable . foreach_optional_arg ')' foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 662

    $default  reduce using rule 86 (foreach_optional_arg)

    foreach_optional_arg  go to state 665


state 584

   88 foreach_variable: variable .

    $default  reduce using rule 88 (foreach_variable)


state 585

   96 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 96 (declare_list)


state 586

   97 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 666


state 587

   95 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 667


state 588

   94 declare_statement: statement .

    $default  reduce using rule 94 (declare_statement)


state 589

   53 unticked_statement: "declare (T_DECLARE)" '(' declare_list ')' declare_statement .

    $default  reduce using rule 53 (unticked_statement)


state 590

  100 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  101                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 668

    $default  reduce using rule 102 (case_list)

    case_list  go to state 669


state 591

   98 switch_case_list: '{' . case_list '}'
   99                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 670

    $default  reduce using rule 102 (case_list)

    case_list  go to state 671


state 592

   37 unticked_statement: "switch (T_SWITCH)" '(' expr ')' switch_case_list .

    $default  reduce using rule 37 (unticked_statement)


state 593

  335 static_scalar: '+' static_scalar .

    $default  reduce using rule 335 (static_scalar)


state 594

  336 static_scalar: '-' static_scalar .

    $default  reduce using rule 336 (static_scalar)


state 595

  357 non_empty_static_array_pair_list: static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  358                                 | static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 672

    $default  reduce using rule 358 (non_empty_static_array_pair_list)


state 596

  338 static_scalar: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 673


state 597

  352 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  356                                 | non_empty_static_array_pair_list . ',' static_scalar

    ','  shift, and go to state 674

    $default  reduce using rule 353 (possible_comma)

    possible_comma  go to state 675


state 598

  337 static_scalar: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    $default  reduce using rule 351 (static_array_pair_list)

    namespace_name                    go to state 482
    class_name                        go to state 483
    common_scalar                     go to state 484
    static_scalar                     go to state 595
    static_class_constant             go to state 486
    static_array_pair_list            go to state 676
    non_empty_static_array_pair_list  go to state 597


state 599

  329 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 353


state 600

  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  333 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 677


state 601

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  300 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  334 static_scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 300 (class_name)
    $default                       reduce using rule 334 (static_scalar)


state 602

  341 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 678


state 603

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" . '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    '('  shift, and go to state 679


state 604

   20 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 20 (use_declaration)


state 605

  143 global_var: '$' '{' expr '}' .

    $default  reduce using rule 143 (global_var)


state 606

  145 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 680
    static_class_constant  go to state 486


state 607

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 681


state 608

   64 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 64 (unset_variables)


state 609

   50 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 50 (unticked_statement)


state 610

  440 isset_variables: isset_variables ',' variable .

    $default  reduce using rule 440 (isset_variables)


state 611

  404 assignment_list: assignment_list . ',' assignment_list_element
  407 assignment_list_element: "list (T_LIST)" '(' assignment_list . ')'

    ','  shift, and go to state 503
    ')'  shift, and go to state 682


state 612

  404 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 404 (assignment_list)


state 613

  211 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 683
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 614

  424 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset ']' .

    $default  reduce using rule 424 (encaps_var)


state 615

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  427 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ']'                           shift, and go to state 684


state 616

  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 685


state 617

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' top_statement_list '}' .

    $default  reduce using rule 11 (top_statement)


state 618

  291 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')' .

    $default  reduce using rule 291 (function_call)


state 619

  204 chaining_dereference: '[' dim_offset . ']'

    ']'  shift, and go to state 686


state 620

  368 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . method_or_not

    '('  shift, and go to state 560

    $default  reduce using rule 374 (method_or_not)

    array_method_dereference  go to state 561
    method                    go to state 562
    method_or_not             go to state 687


state 621

  201 chaining_method_or_property: chaining_method_or_property variable_property .

    $default  reduce using rule 201 (chaining_method_or_property)


state 622

  203 chaining_dereference: chaining_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 688
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 623

  201 chaining_method_or_property: chaining_method_or_property . variable_property
  205 chaining_instance_call: chaining_dereference chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 519

    $default  reduce using rule 205 (chaining_instance_call)

    variable_property  go to state 621


state 624

   28 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 689


state 625

  138 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 690
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 626

  136 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' expr_without_variable .
  360 expr: expr_without_variable .

    ','       reduce using rule 136 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 136 (non_empty_function_call_parameter_list)
    $default  reduce using rule 360 (expr)


state 627

  137 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' variable .
  212 expr_without_variable: variable . '=' expr
  213                      | variable . '=' '&' variable
  214                      | variable . '=' '&' "new (T_NEW)" class_name_reference ctor_arguments
  216                      | variable . "+= (T_PLUS_EQUAL)" expr
  217                      | variable . "-= (T_MINUS_EQUAL)" expr
  218                      | variable . "*= (T_MUL_EQUAL)" expr
  219                      | variable . "/= (T_DIV_EQUAL)" expr
  220                      | variable . ".= (T_CONCAT_EQUAL)" expr
  221                      | variable . "%= (T_MOD_EQUAL)" expr
  222                      | variable . "&= (T_AND_EQUAL)" expr
  223                      | variable . "|= (T_OR_EQUAL)" expr
  224                      | variable . "^= (T_XOR_EQUAL)" expr
  225                      | variable . "<<= (T_SL_EQUAL)" expr
  226                      | variable . ">>= (T_SR_EQUAL)" expr
  361 r_variable: variable .
  363 rw_variable: variable .

    '='                    shift, and go to state 263
    ">>= (T_SR_EQUAL)"     shift, and go to state 264
    "<<= (T_SL_EQUAL)"     shift, and go to state 265
    "^= (T_XOR_EQUAL)"     shift, and go to state 266
    "|= (T_OR_EQUAL)"      shift, and go to state 267
    "&= (T_AND_EQUAL)"     shift, and go to state 268
    "%= (T_MOD_EQUAL)"     shift, and go to state 269
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 270
    "/= (T_DIV_EQUAL)"     shift, and go to state 271
    "*= (T_MUL_EQUAL)"     shift, and go to state 272
    "-= (T_MINUS_EQUAL)"   shift, and go to state 273
    "+= (T_PLUS_EQUAL)"    shift, and go to state 274

    ','           reduce using rule 137 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 363 (rw_variable)
    "++ (T_INC)"  reduce using rule 363 (rw_variable)
    ')'           reduce using rule 137 (non_empty_function_call_parameter_list)
    $default      reduce using rule 361 (r_variable)


state 628

   21 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 21 (constant_declaration)


state 629

  302 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 691


state 630

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  303 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 303 (fully_qualified_class_name)


state 631

   83 implements_list: "implements (T_IMPLEMENTS)" interface_list .
   85 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 633

    $default  reduce using rule 83 (implements_list)


state 632

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from implements_list '{' . class_statement_list '}'

    $default  reduce using rule 149 (class_statement_list)

    class_statement_list  go to state 692


state 633

   85 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 693


state 634

   72 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" interface_extends_list '{' class_statement_list . '}'
  148 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 694
    "use (T_USE)"              shift, and go to state 695
    "public (T_PUBLIC)"        shift, and go to state 696
    "protected (T_PROTECTED)"  shift, and go to state 697
    "private (T_PRIVATE)"      shift, and go to state 698
    "final (T_FINAL)"          shift, and go to state 699
    "abstract (T_ABSTRACT)"    shift, and go to state 700
    "static (T_STATIC)"        shift, and go to state 701
    "var (T_VAR)"              shift, and go to state 702
    '}'                        shift, and go to state 703

    $default  reduce using rule 179 (method_modifiers)

    class_statement             go to state 704
    trait_use_statement         go to state 705
    variable_modifiers          go to state 706
    method_modifiers            go to state 707
    non_empty_member_modifiers  go to state 708
    member_modifier             go to state 709
    class_constant_declaration  go to state 710


state 635

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 711


state 636

  280 expr_without_variable: function is_reference '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 712

    $default  reduce using rule 283 (lexical_vars)

    lexical_vars  go to state 713


state 637

  123 non_empty_parameter_list: non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)"
  124                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)"
  125                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  126                         | non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 541
    "callable (T_CALLABLE)"    shift, and go to state 542
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    $default  reduce using rule 127 (optional_class_type)

    namespace_name              go to state 533
    optional_class_type         go to state 714
    fully_qualified_class_name  go to state 546


state 638

  120 non_empty_parameter_list: optional_class_type '&' . "variable (T_VARIABLE)"
  121                         | optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 715


state 639

  119 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" .
  122                         | optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 716

    $default  reduce using rule 119 (non_empty_parameter_list)


state 640

  401 variable_name: '{' expr '}' .

    $default  reduce using rule 401 (variable_name)


state 641

  293 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 717


state 642

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 718


state 643

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  263                      | expr '?' expr ':' expr .
  264                      | expr . '?' ':' expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 263 (expr_without_variable)


state 644

  214 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . ctor_arguments

    '('  shift, and go to state 298

    $default  reduce using rule 317 (ctor_arguments)

    ctor_arguments  go to state 719


state 645

  295 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 720


state 646

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 721


state 647

  371 method: '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 722


state 648

  369 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 723
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 649

  370 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 393 (dim_offset)

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 724
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 650

  364 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" object_property method_or_not variable_properties .
  366 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 519

    $default  reduce using rule 364 (variable)

    variable_property  go to state 725


state 651

  397 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 726


state 652

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  398 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    '}'                           shift, and go to state 727


state 653

  415 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 728
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 654

  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr
  411 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 411 (non_empty_array_pair_list)


state 655

  310 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 443
    "variable (T_VARIABLE)"  shift, and go to state 33
    '{'                      shift, and go to state 393
    '$'                      shift, and go to state 79

    variable_without_objects   go to state 444
    reference_variable         go to state 395
    compound_variable          go to state 111
    object_property            go to state 729
    object_dim_list            go to state 446
    variable_name              go to state 447
    simple_indirect_reference  go to state 397


state 656

  308 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 308 (dynamic_class_name_variable_properties)


state 657

   23 inner_statement_list: inner_statement_list . inner_statement
   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' inner_statement_list . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 111 (new_elseif_list)

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_elseif_list                          go to state 730
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 658

   32 unticked_statement: "if (T_IF)" '(' expr ')' statement elseif_list . else_single
  110 elseif_list: elseif_list . "elseif (T_ELSEIF)" '(' expr ')' statement

    "elseif (T_ELSEIF)"  shift, and go to state 731
    "else (T_ELSE)"      shift, and go to state 732

    "elseif (T_ELSEIF)"  [reduce using rule 113 (else_single)]
    "else (T_ELSE)"      [reduce using rule 113 (else_single)]
    $default             reduce using rule 113 (else_single)

    else_single  go to state 733


state 659

   35 unticked_statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' . ';'

    ';'  shift, and go to state 734


state 660

   23 inner_statement_list: inner_statement_list . inner_statement
  108 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "endwhile (T_ENDWHILE)"                       shift, and go to state 735
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 661

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' for_expr ';' . for_expr ')' for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 197 (for_expr)

    namespace_name                     go to state 82
    for_expr                           go to state 736
    non_empty_for_expr                 go to state 311
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 312
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 662

   87 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 582
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 33
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 79

    namespace_name                     go to state 140
    foreach_variable                   go to state 737
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 584
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 663

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" variable foreach_optional_arg . ')' foreach_statement

    ')'  shift, and go to state 738


state 664

   89 foreach_variable: '&' variable .

    $default  reduce using rule 89 (foreach_variable)


state 665

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" foreach_variable foreach_optional_arg . ')' foreach_statement

    ')'  shift, and go to state 739


state 666

   97 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 740
    static_class_constant  go to state 486


state 667

   23 inner_statement_list: inner_statement_list . inner_statement
   95 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "enddeclare (T_ENDDECLARE)"                   shift, and go to state 741
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 668

  101 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 102 (case_list)

    case_list  go to state 742


state 669

  100 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  103 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  104          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 743
    "case (T_CASE)"            shift, and go to state 744
    "default (T_DEFAULT)"      shift, and go to state 745


state 670

   99 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 102 (case_list)

    case_list  go to state 746


state 671

   98 switch_case_list: '{' case_list . '}'
  103 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  104          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 744
    "default (T_DEFAULT)"  shift, and go to state 745
    '}'                    shift, and go to state 747


state 672

  357 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 748
    static_class_constant  go to state 486


state 673

  338 static_scalar: '[' static_array_pair_list ']' .

    $default  reduce using rule 338 (static_scalar)


state 674

  354 possible_comma: ',' .
  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  356                                 | non_empty_static_array_pair_list ',' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    $default  reduce using rule 354 (possible_comma)

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 749
    static_class_constant  go to state 486


state 675

  352 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 352 (static_array_pair_list)


state 676

  337 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 750


state 677

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  299 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  333 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 299 (class_name)
    $default                       reduce using rule 333 (static_scalar)


state 678

  341 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 341 (static_class_constant)


state 679

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' . fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 751


state 680

  145 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 145 (static_var_list)


state 681

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 712

    $default  reduce using rule 283 (lexical_vars)

    lexical_vars  go to state 752


state 682

  407 assignment_list_element: "list (T_LIST)" '(' assignment_list ')' .

    $default  reduce using rule 407 (assignment_list_element)


state 683

  211 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr .
  231                      | expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259

    $default  reduce using rule 211 (expr_without_variable)


state 684

  427 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 753


state 685

  290 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' function_call_parameter_list ')' .

    $default  reduce using rule 290 (function_call)


state 686

  204 chaining_dereference: '[' dim_offset ']' .

    $default  reduce using rule 204 (chaining_dereference)


state 687

  368 variable_property: "-> (T_OBJECT_OPERATOR)" object_property method_or_not .

    $default  reduce using rule 368 (variable_property)


state 688

  203 chaining_dereference: chaining_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 754


state 689

   28 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 28 (inner_statement)


state 690

  138 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' w_variable .

    $default  reduce using rule 138 (non_empty_function_call_parameter_list)


state 691

    5 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  302 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 224

    $default  reduce using rule 302 (fully_qualified_class_name)


state 692

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from implements_list '{' class_statement_list . '}'
  148 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 694
    "use (T_USE)"              shift, and go to state 695
    "public (T_PUBLIC)"        shift, and go to state 696
    "protected (T_PROTECTED)"  shift, and go to state 697
    "private (T_PRIVATE)"      shift, and go to state 698
    "final (T_FINAL)"          shift, and go to state 699
    "abstract (T_ABSTRACT)"    shift, and go to state 700
    "static (T_STATIC)"        shift, and go to state 701
    "var (T_VAR)"              shift, and go to state 702
    '}'                        shift, and go to state 755

    $default  reduce using rule 179 (method_modifiers)

    class_statement             go to state 704
    trait_use_statement         go to state 705
    variable_modifiers          go to state 706
    method_modifiers            go to state 707
    non_empty_member_modifiers  go to state 708
    member_modifier             go to state 709
    class_constant_declaration  go to state 710


state 693

   85 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 85 (interface_list)


state 694

  194 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 756


state 695

  154 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    trait_list                  go to state 757
    fully_qualified_class_name  go to state 758


state 696

  183 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 183 (member_modifier)


state 697

  184 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 184 (member_modifier)


state 698

  185 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 185 (member_modifier)


state 699

  188 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 188 (member_modifier)


state 700

  187 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 187 (member_modifier)


state 701

  186 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 186 (member_modifier)


state 702

  178 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 178 (variable_modifiers)


state 703

   72 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 72 (unticked_class_declaration_statement)


state 704

  148 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 148 (class_statement_list)


state 705

  152 class_statement: trait_use_statement .

    $default  reduce using rule 152 (class_statement)


state 706

  150 class_statement: variable_modifiers . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 759

    class_variable_declaration  go to state 760


state 707

  153 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 46

    function  go to state 761


state 708

  177 variable_modifiers: non_empty_member_modifiers .
  180 method_modifiers: non_empty_member_modifiers .
  182 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 696
    "protected (T_PROTECTED)"  shift, and go to state 697
    "private (T_PRIVATE)"      shift, and go to state 698
    "final (T_FINAL)"          shift, and go to state 699
    "abstract (T_ABSTRACT)"    shift, and go to state 700
    "static (T_STATIC)"        shift, and go to state 701

    "function (T_FUNCTION)"  reduce using rule 180 (method_modifiers)
    $default                 reduce using rule 177 (variable_modifiers)

    member_modifier  go to state 762


state 709

  181 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 181 (non_empty_member_modifiers)


state 710

  151 class_statement: class_constant_declaration . ';'
  193 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 763
    ';'  shift, and go to state 764


state 711

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 765


state 712

  284 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 766


state 713

  280 expr_without_variable: function is_reference '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 767


state 714

  123 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)"
  124                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)"
  125                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  126                         | non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 768
    "variable (T_VARIABLE)"  shift, and go to state 769


state 715

  120 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" .
  121                         | optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 770

    $default  reduce using rule 120 (non_empty_parameter_list)


state 716

  122 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 771
    static_class_constant  go to state 486


state 717

  293 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')' .

    $default  reduce using rule 293 (function_call)


state 718

  292 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')' .

    $default  reduce using rule 292 (function_call)


state 719

  214 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference ctor_arguments .

    $default  reduce using rule 214 (expr_without_variable)


state 720

  295 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' function_call_parameter_list ')' .

    $default  reduce using rule 295 (function_call)


state 721

  294 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' function_call_parameter_list ')' .

    $default  reduce using rule 294 (function_call)


state 722

  371 method: '(' function_call_parameter_list ')' .

    $default  reduce using rule 371 (method)


state 723

  369 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 772


state 724

  370 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 773


state 725

  366 variable_properties: variable_properties variable_property .

    $default  reduce using rule 366 (variable_properties)


state 726

  397 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 397 (object_dim_list)


state 727

  398 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 398 (object_dim_list)


state 728

  415 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 415 (non_empty_array_pair_list)


state 729

  310 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 310 (dynamic_class_name_variable_property)


state 730

   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' inner_statement_list new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  112 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 774
    "else (T_ELSE)"      shift, and go to state 775

    $default  reduce using rule 115 (new_else_single)

    new_else_single  go to state 776


state 731

  110 elseif_list: elseif_list "elseif (T_ELSEIF)" . '(' expr ')' statement

    '('  shift, and go to state 777


state 732

  114 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 778
    unticked_statement                 go to state 86
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 733

   32 unticked_statement: "if (T_IF)" '(' expr ')' statement elseif_list else_single .

    $default  reduce using rule 32 (unticked_statement)


state 734

   35 unticked_statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';' .

    $default  reduce using rule 35 (unticked_statement)


state 735

  108 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 779


state 736

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' for_expr ';' for_expr . ')' for_statement

    ')'  shift, and go to state 780


state 737

   87 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 87 (foreach_optional_arg)


state 738

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" variable foreach_optional_arg ')' . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 781
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 782
    unticked_statement                 go to state 86
    foreach_statement                  go to state 783
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 739

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" foreach_variable foreach_optional_arg ')' . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 781
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 782
    unticked_statement                 go to state 86
    foreach_statement                  go to state 784
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 740

   97 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 97 (declare_list)


state 741

   95 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 785


state 742

  101 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  103 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  104          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 786
    "case (T_CASE)"            shift, and go to state 744
    "default (T_DEFAULT)"      shift, and go to state 745


state 743

  100 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 787


state 744

  103 case_list: case_list "case (T_CASE)" . expr case_separator inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 788
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 745

  104 case_list: case_list "default (T_DEFAULT)" . case_separator inner_statement_list

    ':'  shift, and go to state 789
    ';'  shift, and go to state 790

    case_separator  go to state 791


state 746

   99 switch_case_list: '{' ';' case_list . '}'
  103 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  104          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 744
    "default (T_DEFAULT)"  shift, and go to state 745
    '}'                    shift, and go to state 792


state 747

   98 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 98 (switch_case_list)


state 748

  357 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 357 (non_empty_static_array_pair_list)


state 749

  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  356                                 | non_empty_static_array_pair_list ',' static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 793

    $default  reduce using rule 356 (non_empty_static_array_pair_list)


state 750

  337 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 337 (static_scalar)


state 751

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name . "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 794


state 752

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 795


state 753

  427 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 427 (encaps_var)


state 754

  203 chaining_dereference: chaining_dereference '[' dim_offset ']' .

    $default  reduce using rule 203 (chaining_dereference)


state 755

   71 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from implements_list '{' class_statement_list '}' .

    $default  reduce using rule 71 (unticked_class_declaration_statement)


state 756

  194 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 796


state 757

  154 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  156 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 797
    ';'  shift, and go to state 798
    '{'  shift, and go to state 799

    trait_adaptations  go to state 800


state 758

  155 trait_list: fully_qualified_class_name .

    $default  reduce using rule 155 (trait_list)


state 759

  191 class_variable_declaration: "variable (T_VARIABLE)" .
  192                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 801

    $default  reduce using rule 191 (class_variable_declaration)


state 760

  150 class_statement: variable_modifiers class_variable_declaration . ';'
  189 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  190                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 802
    ';'  shift, and go to state 803


state 761

  153 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" '(' parameter_list ')' method_body

    '&'  shift, and go to state 230

    $default  reduce using rule 68 (is_reference)

    is_reference  go to state 804


state 762

  182 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 182 (non_empty_member_modifiers)


state 763

  193 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 805


state 764

  151 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 151 (class_statement)


state 765

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 806


state 766

  284 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 807
    "variable (T_VARIABLE)"  shift, and go to state 808

    lexical_var_list  go to state 809


state 767

  280 expr_without_variable: function is_reference '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 810


state 768

  124 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)"
  125                         | non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 811


state 769

  123 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" .
  126                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 812

    $default  reduce using rule 123 (non_empty_parameter_list)


state 770

  121 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 813
    static_class_constant  go to state 486


state 771

  122 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 122 (non_empty_parameter_list)


state 772

  369 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 369 (array_method_dereference)


state 773

  370 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 370 (array_method_dereference)


state 774

  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . '(' expr ')' ':' inner_statement_list

    '('  shift, and go to state 814


state 775

  116 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 815


state 776

   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 816


state 777

  110 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' . expr ')' statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 817
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 778

  114 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 114 (else_single)


state 779

  108 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 108 (while_statement)


state 780

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' for_expr ';' for_expr ')' . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    ':'                                           shift, and go to state 818
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 819
    unticked_statement                 go to state 86
    for_statement                      go to state 820
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 781

   93 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 821


state 782

   92 foreach_statement: statement .

    $default  reduce using rule 92 (foreach_statement)


state 783

   52 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" variable foreach_optional_arg ')' foreach_statement .

    $default  reduce using rule 52 (unticked_statement)


state 784

   51 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" foreach_variable foreach_optional_arg ')' foreach_statement .

    $default  reduce using rule 51 (unticked_statement)


state 785

   95 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 95 (declare_statement)


state 786

  101 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 822


state 787

  100 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 100 (switch_case_list)


state 788

  103 case_list: case_list "case (T_CASE)" expr . case_separator inner_statement_list
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    ':'                           shift, and go to state 789
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ';'                           shift, and go to state 790

    case_separator  go to state 823


state 789

  105 case_separator: ':' .

    $default  reduce using rule 105 (case_separator)


state 790

  106 case_separator: ';' .

    $default  reduce using rule 106 (case_separator)


state 791

  104 case_list: case_list "default (T_DEFAULT)" case_separator . inner_statement_list

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 824


state 792

   99 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 99 (switch_case_list)


state 793

  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 825
    static_class_constant  go to state 486


state 794

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" . ')' '{' inner_statement_list '}' additional_catches

    ')'  shift, and go to state 826


state 795

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 827


state 796

  194 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 828
    static_class_constant  go to state 486


state 797

  156 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 829


state 798

  157 trait_adaptations: ';' .

    $default  reduce using rule 157 (trait_adaptations)


state 799

  158 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 830
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    $default  reduce using rule 159 (trait_adaptation_list)

    namespace_name                          go to state 533
    trait_adaptation_list                   go to state 831
    non_empty_trait_adaptation_list         go to state 832
    trait_adaptation_statement              go to state 833
    trait_precedence                        go to state 834
    trait_method_reference                  go to state 835
    trait_method_reference_fully_qualified  go to state 836
    trait_alias                             go to state 837
    fully_qualified_class_name              go to state 838


state 800

  154 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 154 (trait_use_statement)


state 801

  192 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 839
    static_class_constant  go to state 486


state 802

  189 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  190                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 840


state 803

  150 class_statement: variable_modifiers class_variable_declaration ';' .

    $default  reduce using rule 150 (class_statement)


state 804

  153 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 841


state 805

  193 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 842


state 806

   23 inner_statement_list: inner_statement_list . inner_statement
   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list ')' '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 843
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 807

  288 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 844


state 808

  287 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 287 (lexical_var_list)


state 809

  284 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  285 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  286                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 845
    ')'  shift, and go to state 846


state 810

   23 inner_statement_list: inner_statement_list . inner_statement
  280 expr_without_variable: function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 847
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 811

  124 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" .
  125                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 848

    $default  reduce using rule 124 (non_empty_parameter_list)


state 812

  126 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 849
    static_class_constant  go to state 486


state 813

  121 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 121 (non_empty_parameter_list)


state 814

  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' . expr ')' ':' inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "function (T_FUNCTION)"                       shift, and go to state 46
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 850
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 815

  116 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 851


state 816

   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 852


state 817

  110 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr . ')' statement
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 853


state 818

   91 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 854


state 819

   90 for_statement: statement .

    $default  reduce using rule 90 (for_statement)


state 820

   36 unticked_statement: "for (T_FOR)" '(' for_expr ';' for_expr ';' for_expr ')' for_statement .

    $default  reduce using rule 36 (unticked_statement)


state 821

   23 inner_statement_list: inner_statement_list . inner_statement
   93 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "endforeach (T_ENDFOREACH)"                   shift, and go to state 855
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 822

  101 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 101 (switch_case_list)


state 823

  103 case_list: case_list "case (T_CASE)" expr case_separator . inner_statement_list

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 856


state 824

   23 inner_statement_list: inner_statement_list . inner_statement
  104 case_list: case_list "default (T_DEFAULT)" case_separator inner_statement_list .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 104 (case_list)

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 825

  355 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 355 (non_empty_static_array_pair_list)


state 826

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' . '{' inner_statement_list '}' additional_catches

    '{'  shift, and go to state 857


state 827

   23 inner_statement_list: inner_statement_list . inner_statement
  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 858
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 828

  194 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 194 (class_constant_declaration)


state 829

  156 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 156 (trait_list)


state 830

    4 namespace_name: "identifier (T_STRING)" .
  168 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 168 (trait_method_reference)
    $default     reduce using rule 4 (namespace_name)


state 831

  158 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 859


state 832

  160 trait_adaptation_list: non_empty_trait_adaptation_list .
  162 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 830
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    $default  reduce using rule 160 (trait_adaptation_list)

    namespace_name                          go to state 533
    trait_adaptation_statement              go to state 860
    trait_precedence                        go to state 834
    trait_method_reference                  go to state 835
    trait_method_reference_fully_qualified  go to state 836
    trait_alias                             go to state 837
    fully_qualified_class_name              go to state 838


state 833

  161 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 161 (non_empty_trait_adaptation_list)


state 834

  163 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 861


state 835

  171 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  172            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 862


state 836

  165 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  169 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 863

    $default  reduce using rule 169 (trait_method_reference)


state 837

  164 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 864


state 838

  170 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 865


state 839

  192 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 192 (class_variable_declaration)


state 840

  189 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  190                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 866

    $default  reduce using rule 189 (class_variable_declaration)


state 841

  153 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . '(' parameter_list ')' method_body

    '('  shift, and go to state 867


state 842

  193 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 868
    static_class_constant  go to state 486


state 843

   70 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 70 (unticked_function_declaration_statement)


state 844

  288 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 288 (lexical_var_list)


state 845

  285 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  286                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 869
    "variable (T_VARIABLE)"  shift, and go to state 870


state 846

  284 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 284 (lexical_vars)


state 847

  280 expr_without_variable: function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 280 (expr_without_variable)


state 848

  125 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 871
    static_class_constant  go to state 486


state 849

  126 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 126 (non_empty_parameter_list)


state 850

  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr . ')' ':' inner_statement_list
  231 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  232                      | expr . "&& (T_BOOLEAN_AND)" expr
  233                      | expr . "or (T_LOGICAL_OR)" expr
  234                      | expr . "and (T_LOGICAL_AND)" expr
  235                      | expr . "xor (T_LOGICAL_XOR)" expr
  236                      | expr . '|' expr
  237                      | expr . '&' expr
  238                      | expr . '^' expr
  239                      | expr . '.' expr
  240                      | expr . '+' expr
  241                      | expr . '-' expr
  242                      | expr . '*' expr
  243                      | expr . '/' expr
  244                      | expr . '%' expr
  245                      | expr . "<< (T_SL)" expr
  246                      | expr . ">> (T_SR)" expr
  251                      | expr . "=== (T_IS_IDENTICAL)" expr
  252                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  253                      | expr . "== (T_IS_EQUAL)" expr
  254                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  255                      | expr . '<' expr
  256                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  257                      | expr . '>' expr
  258                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  259                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  263                      | expr . '?' expr ':' expr
  264                      | expr . '?' ':' expr

    "or (T_LOGICAL_OR)"           shift, and go to state 234
    "xor (T_LOGICAL_XOR)"         shift, and go to state 235
    "and (T_LOGICAL_AND)"         shift, and go to state 236
    '?'                           shift, and go to state 237
    "|| (T_BOOLEAN_OR)"           shift, and go to state 238
    "&& (T_BOOLEAN_AND)"          shift, and go to state 239
    '|'                           shift, and go to state 240
    '^'                           shift, and go to state 241
    '&'                           shift, and go to state 242
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 243
    "=== (T_IS_IDENTICAL)"        shift, and go to state 244
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 245
    "== (T_IS_EQUAL)"             shift, and go to state 246
    '<'                           shift, and go to state 247
    '>'                           shift, and go to state 248
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 249
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 250
    ">> (T_SR)"                   shift, and go to state 251
    "<< (T_SL)"                   shift, and go to state 252
    '+'                           shift, and go to state 253
    '-'                           shift, and go to state 254
    '.'                           shift, and go to state 255
    '*'                           shift, and go to state 256
    '/'                           shift, and go to state 257
    '%'                           shift, and go to state 258
    "instanceof (T_INSTANCEOF)"   shift, and go to state 259
    ')'                           shift, and go to state 872


state 851

   23 inner_statement_list: inner_statement_list . inner_statement
  116 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 116 (new_else_single)

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 852

   33 unticked_statement: "if (T_IF)" '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 33 (unticked_statement)


state 853

  110 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                     go to state 82
    statement                          go to state 873
    unticked_statement                 go to state 86
    new_expr                           go to state 93
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 854

   23 inner_statement_list: inner_statement_list . inner_statement
   91 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "endfor (T_ENDFOR)"                           shift, and go to state 874
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 855

   93 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 875


state 856

   23 inner_statement_list: inner_statement_list . inner_statement
  103 case_list: case_list "case (T_CASE)" expr case_separator inner_statement_list .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 103 (case_list)

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 857

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' . inner_statement_list '}' additional_catches

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 876


state 858

  281 expr_without_variable: "static (T_STATIC)" function is_reference '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 281 (expr_without_variable)


state 859

  158 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 158 (trait_adaptations)


state 860

  162 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 162 (non_empty_trait_adaptation_list)


state 861

  163 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 163 (trait_adaptation_statement)


state 862

  171 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  172            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 696
    "protected (T_PROTECTED)"  shift, and go to state 697
    "private (T_PRIVATE)"      shift, and go to state 698
    "final (T_FINAL)"          shift, and go to state 699
    "abstract (T_ABSTRACT)"    shift, and go to state 700
    "static (T_STATIC)"        shift, and go to state 701

    $default  reduce using rule 173 (trait_modifiers)

    trait_modifiers  go to state 877
    member_modifier  go to state 878


state 863

  165 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    trait_reference_list        go to state 879
    fully_qualified_class_name  go to state 880


state 864

  164 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 164 (trait_adaptation_statement)


state 865

  170 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 881


state 866

  190 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 474
    '-'                                           shift, and go to state 475
    '['                                           shift, and go to state 476
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 477
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 478
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 479
    "namespace (T_NAMESPACE)"                     shift, and go to state 480
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 481

    namespace_name         go to state 482
    class_name             go to state 483
    common_scalar          go to state 484
    static_scalar          go to state 882
    static_class_constant  go to state 486


state 867

  153 class_statement: method_modifiers function is_reference "identifier (T_STRING)" '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 541
    "callable (T_CALLABLE)"    shift, and go to state 542
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    ')'       reduce using rule 118 (parameter_list)
    $default  reduce using rule 127 (optional_class_type)

    namespace_name              go to state 533
    parameter_list              go to state 883
    non_empty_parameter_list    go to state 544
    optional_class_type         go to state 545
    fully_qualified_class_name  go to state 546


state 868

  193 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 193 (class_constant_declaration)


state 869

  286 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 884


state 870

  285 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 285 (lexical_var_list)


state 871

  125 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 125 (non_empty_parameter_list)


state 872

  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' . ':' inner_statement_list

    ':'  shift, and go to state 885


state 873

  110 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' statement .

    $default  reduce using rule 110 (elseif_list)


state 874

   91 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 886


state 875

   93 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 93 (foreach_statement)


state 876

   23 inner_statement_list: inner_statement_list . inner_statement
   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list . '}' additional_catches

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 887
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 877

  171 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 888


state 878

  172 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  174 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 174 (trait_modifiers)
    $default                 reduce using rule 172 (trait_alias)


state 879

  165 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  167 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 889

    $default  reduce using rule 165 (trait_precedence)


state 880

  166 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 166 (trait_reference_list)


state 881

  170 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 170 (trait_method_reference_fully_qualified)


state 882

  190 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 190 (class_variable_declaration)


state 883

  153 class_statement: method_modifiers function is_reference "identifier (T_STRING)" '(' parameter_list . ')' method_body

    ')'  shift, and go to state 890


state 884

  286 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 286 (lexical_var_list)


state 885

  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' . inner_statement_list

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 891


state 886

   91 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 91 (for_statement)


state 887

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' . additional_catches

    "catch (T_CATCH)"  shift, and go to state 892

    $default  reduce using rule 59 (additional_catches)

    additional_catches            go to state 893
    non_empty_additional_catches  go to state 894
    additional_catch              go to state 895


state 888

  171 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 171 (trait_alias)


state 889

  167 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 896


state 890

  153 class_statement: method_modifiers function is_reference "identifier (T_STRING)" '(' parameter_list ')' . method_body

    ';'  shift, and go to state 897
    '{'  shift, and go to state 898

    method_body  go to state 899


state 891

   23 inner_statement_list: inner_statement_list . inner_statement
  112 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list .

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    $default  reduce using rule 112 (new_elseif_list)

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 892

   62 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    '('  shift, and go to state 900


state 893

   55 unticked_statement: "try (T_TRY)" '{' inner_statement_list '}' "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' additional_catches .

    $default  reduce using rule 55 (unticked_statement)


state 894

   58 additional_catches: non_empty_additional_catches .
   61 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 892

    $default  reduce using rule 58 (additional_catches)

    additional_catch  go to state 901


state 895

   60 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 60 (non_empty_additional_catches)


state 896

  167 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 167 (trait_reference_list)


state 897

  175 method_body: ';' .

    $default  reduce using rule 175 (method_body)


state 898

  176 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 902


state 899

  153 class_statement: method_modifiers function is_reference "identifier (T_STRING)" '(' parameter_list ')' method_body .

    $default  reduce using rule 153 (class_statement)


state 900

   62 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 532

    namespace_name              go to state 533
    fully_qualified_class_name  go to state 903


state 901

   61 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 61 (non_empty_additional_catches)


state 902

   23 inner_statement_list: inner_statement_list . inner_statement
  176 method_body: '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 904
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 903

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 905


state 904

  176 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 176 (method_body)


state 905

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 906


state 906

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 907


state 907

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' . inner_statement_list '}'

    $default  reduce using rule 24 (inner_statement_list)

    inner_statement_list  go to state 908


state 908

   23 inner_statement_list: inner_statement_list . inner_statement
   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list . '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 4
    "require (T_REQUIRE)"                         shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 7
    "include (T_INCLUDE)"                         shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    '+'                                           shift, and go to state 10
    '-'                                           shift, and go to state 11
    '!'                                           shift, and go to state 12
    '~'                                           shift, and go to state 13
    '@'                                           shift, and go to state 14
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 15
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 16
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 17
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 18
    "(string) (T_STRING_CAST)"                    shift, and go to state 19
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 20
    "(int) (T_INT_CAST)"                          shift, and go to state 21
    "-- (T_DEC)"                                  shift, and go to state 22
    "++ (T_INC)"                                  shift, and go to state 23
    '['                                           shift, and go to state 24
    "clone (T_CLONE)"                             shift, and go to state 25
    "new (T_NEW)"                                 shift, and go to state 26
    "exit (T_EXIT)"                               shift, and go to state 27
    "if (T_IF)"                                   shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 29
    "floating-point number (T_DNUMBER)"           shift, and go to state 30
    "identifier (T_STRING)"                       shift, and go to state 31
    "variable name (T_STRING_VARNAME)"            shift, and go to state 32
    "variable (T_VARIABLE)"                       shift, and go to state 33
    T_INLINE_HTML                                 shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 35
    "echo (T_ECHO)"                               shift, and go to state 36
    "do (T_DO)"                                   shift, and go to state 37
    "while (T_WHILE)"                             shift, and go to state 38
    "for (T_FOR)"                                 shift, and go to state 39
    "foreach (T_FOREACH)"                         shift, and go to state 40
    "declare (T_DECLARE)"                         shift, and go to state 41
    "switch (T_SWITCH)"                           shift, and go to state 42
    "break (T_BREAK)"                             shift, and go to state 43
    "continue (T_CONTINUE)"                       shift, and go to state 44
    "goto (T_GOTO)"                               shift, and go to state 45
    "function (T_FUNCTION)"                       shift, and go to state 46
    "return (T_RETURN)"                           shift, and go to state 48
    "try (T_TRY)"                                 shift, and go to state 49
    "throw (T_THROW)"                             shift, and go to state 50
    "global (T_GLOBAL)"                           shift, and go to state 52
    "final (T_FINAL)"                             shift, and go to state 53
    "abstract (T_ABSTRACT)"                       shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 55
    "unset (T_UNSET)"                             shift, and go to state 56
    "isset (T_ISSET)"                             shift, and go to state 57
    "empty (T_EMPTY)"                             shift, and go to state 58
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 368
    "class (T_CLASS)"                             shift, and go to state 60
    "trait (T_TRAIT)"                             shift, and go to state 61
    "interface (T_INTERFACE)"                     shift, and go to state 62
    "list (T_LIST)"                               shift, and go to state 63
    "array (T_ARRAY)"                             shift, and go to state 64
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 65
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 66
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 67
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 68
    "__LINE__ (T_LINE)"                           shift, and go to state 69
    "__FILE__ (T_FILE)"                           shift, and go to state 70
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 71
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 73
    "__DIR__ (T_DIR)"                             shift, and go to state 74
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 75
    '('                                           shift, and go to state 76
    ';'                                           shift, and go to state 77
    '{'                                           shift, and go to state 78
    '}'                                           shift, and go to state 909
    '$'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81

    namespace_name                           go to state 82
    inner_statement                          go to state 370
    statement                                go to state 371
    unticked_statement                       go to state 86
    function_declaration_statement           go to state 372
    class_declaration_statement              go to state 373
    unticked_function_declaration_statement  go to state 89
    unticked_class_declaration_statement     go to state 90
    class_entry_type                         go to state 91
    interface_entry                          go to state 92
    new_expr                                 go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 909

   62 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' .

    $default  reduce using rule 62 (additional_catch)
